// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_3d_package.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hmi_5f3d_5fpackage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hmi_5f3d_5fpackage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "hmi_3d/mv_can.pb.h"
#include "hmi_3d/mv_uss.pb.h"
#include "hmi_3d/mv_slot.pb.h"
#include "hmi_3d/mv_od.pb.h"
#include "hmi_3d/mv_apa_state_info.pb.h"
#include "hmi_3d/mv_plan_full_path.pb.h"
#include "hmi_3d/mv_plan_track_info.pb.h"
#include "base_head.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hmi_5f3d_5fpackage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hmi_5f3d_5fpackage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hmi_5f3d_5fpackage_2eproto;
class PB_Hmi3dPackage;
class PB_Hmi3dPackageDefaultTypeInternal;
extern PB_Hmi3dPackageDefaultTypeInternal _PB_Hmi3dPackage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PB_Hmi3dPackage* Arena::CreateMaybeMessage<::PB_Hmi3dPackage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PB_Hmi3dPackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PB_Hmi3dPackage) */ {
 public:
  inline PB_Hmi3dPackage() : PB_Hmi3dPackage(nullptr) {};
  virtual ~PB_Hmi3dPackage();

  PB_Hmi3dPackage(const PB_Hmi3dPackage& from);
  PB_Hmi3dPackage(PB_Hmi3dPackage&& from) noexcept
    : PB_Hmi3dPackage() {
    *this = ::std::move(from);
  }

  inline PB_Hmi3dPackage& operator=(const PB_Hmi3dPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_Hmi3dPackage& operator=(PB_Hmi3dPackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PB_Hmi3dPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PB_Hmi3dPackage* internal_default_instance() {
    return reinterpret_cast<const PB_Hmi3dPackage*>(
               &_PB_Hmi3dPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PB_Hmi3dPackage& a, PB_Hmi3dPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_Hmi3dPackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_Hmi3dPackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PB_Hmi3dPackage* New() const final {
    return CreateMaybeMessage<PB_Hmi3dPackage>(nullptr);
  }

  PB_Hmi3dPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PB_Hmi3dPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PB_Hmi3dPackage& from);
  void MergeFrom(const PB_Hmi3dPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_Hmi3dPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PB_Hmi3dPackage";
  }
  protected:
  explicit PB_Hmi3dPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hmi_5f3d_5fpackage_2eproto);
    return ::descriptor_table_hmi_5f3d_5fpackage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseHeadFieldNumber = 1,
    kCanDataFieldNumber = 4,
    kUssSectorDataFieldNumber = 5,
    kApaStateDataFieldNumber = 6,
    kSlotDataFieldNumber = 7,
    kOdDataFieldNumber = 8,
    kPlanTrackDataFieldNumber = 9,
    kPlanFullPathDataFieldNumber = 10,
    kLSendTimsMsFieldNumber = 2,
    kUSendNumFieldNumber = 3,
  };
  // .PB_BaseHead BaseHead = 1;
  bool has_basehead() const;
  private:
  bool _internal_has_basehead() const;
  public:
  void clear_basehead();
  const ::PB_BaseHead& basehead() const;
  ::PB_BaseHead* release_basehead();
  ::PB_BaseHead* mutable_basehead();
  void set_allocated_basehead(::PB_BaseHead* basehead);
  private:
  const ::PB_BaseHead& _internal_basehead() const;
  ::PB_BaseHead* _internal_mutable_basehead();
  public:
  void unsafe_arena_set_allocated_basehead(
      ::PB_BaseHead* basehead);
  ::PB_BaseHead* unsafe_arena_release_basehead();

  // .PB_CanData CanData = 4;
  bool has_candata() const;
  private:
  bool _internal_has_candata() const;
  public:
  void clear_candata();
  const ::PB_CanData& candata() const;
  ::PB_CanData* release_candata();
  ::PB_CanData* mutable_candata();
  void set_allocated_candata(::PB_CanData* candata);
  private:
  const ::PB_CanData& _internal_candata() const;
  ::PB_CanData* _internal_mutable_candata();
  public:
  void unsafe_arena_set_allocated_candata(
      ::PB_CanData* candata);
  ::PB_CanData* unsafe_arena_release_candata();

  // .PB_UssSectorOutputData UssSectorData = 5;
  bool has_usssectordata() const;
  private:
  bool _internal_has_usssectordata() const;
  public:
  void clear_usssectordata();
  const ::PB_UssSectorOutputData& usssectordata() const;
  ::PB_UssSectorOutputData* release_usssectordata();
  ::PB_UssSectorOutputData* mutable_usssectordata();
  void set_allocated_usssectordata(::PB_UssSectorOutputData* usssectordata);
  private:
  const ::PB_UssSectorOutputData& _internal_usssectordata() const;
  ::PB_UssSectorOutputData* _internal_mutable_usssectordata();
  public:
  void unsafe_arena_set_allocated_usssectordata(
      ::PB_UssSectorOutputData* usssectordata);
  ::PB_UssSectorOutputData* unsafe_arena_release_usssectordata();

  // .PB_ApaStateInfo ApaStateData = 6;
  bool has_apastatedata() const;
  private:
  bool _internal_has_apastatedata() const;
  public:
  void clear_apastatedata();
  const ::PB_ApaStateInfo& apastatedata() const;
  ::PB_ApaStateInfo* release_apastatedata();
  ::PB_ApaStateInfo* mutable_apastatedata();
  void set_allocated_apastatedata(::PB_ApaStateInfo* apastatedata);
  private:
  const ::PB_ApaStateInfo& _internal_apastatedata() const;
  ::PB_ApaStateInfo* _internal_mutable_apastatedata();
  public:
  void unsafe_arena_set_allocated_apastatedata(
      ::PB_ApaStateInfo* apastatedata);
  ::PB_ApaStateInfo* unsafe_arena_release_apastatedata();

  // .PB_SlotInfo SlotData = 7;
  bool has_slotdata() const;
  private:
  bool _internal_has_slotdata() const;
  public:
  void clear_slotdata();
  const ::PB_SlotInfo& slotdata() const;
  ::PB_SlotInfo* release_slotdata();
  ::PB_SlotInfo* mutable_slotdata();
  void set_allocated_slotdata(::PB_SlotInfo* slotdata);
  private:
  const ::PB_SlotInfo& _internal_slotdata() const;
  ::PB_SlotInfo* _internal_mutable_slotdata();
  public:
  void unsafe_arena_set_allocated_slotdata(
      ::PB_SlotInfo* slotdata);
  ::PB_SlotInfo* unsafe_arena_release_slotdata();

  // .PB_OdInfo OdData = 8;
  bool has_oddata() const;
  private:
  bool _internal_has_oddata() const;
  public:
  void clear_oddata();
  const ::PB_OdInfo& oddata() const;
  ::PB_OdInfo* release_oddata();
  ::PB_OdInfo* mutable_oddata();
  void set_allocated_oddata(::PB_OdInfo* oddata);
  private:
  const ::PB_OdInfo& _internal_oddata() const;
  ::PB_OdInfo* _internal_mutable_oddata();
  public:
  void unsafe_arena_set_allocated_oddata(
      ::PB_OdInfo* oddata);
  ::PB_OdInfo* unsafe_arena_release_oddata();

  // .PB_PlanTrackInfo PlanTrackData = 9;
  bool has_plantrackdata() const;
  private:
  bool _internal_has_plantrackdata() const;
  public:
  void clear_plantrackdata();
  const ::PB_PlanTrackInfo& plantrackdata() const;
  ::PB_PlanTrackInfo* release_plantrackdata();
  ::PB_PlanTrackInfo* mutable_plantrackdata();
  void set_allocated_plantrackdata(::PB_PlanTrackInfo* plantrackdata);
  private:
  const ::PB_PlanTrackInfo& _internal_plantrackdata() const;
  ::PB_PlanTrackInfo* _internal_mutable_plantrackdata();
  public:
  void unsafe_arena_set_allocated_plantrackdata(
      ::PB_PlanTrackInfo* plantrackdata);
  ::PB_PlanTrackInfo* unsafe_arena_release_plantrackdata();

  // .PB_PlanFullPath PlanFullPathData = 10;
  bool has_planfullpathdata() const;
  private:
  bool _internal_has_planfullpathdata() const;
  public:
  void clear_planfullpathdata();
  const ::PB_PlanFullPath& planfullpathdata() const;
  ::PB_PlanFullPath* release_planfullpathdata();
  ::PB_PlanFullPath* mutable_planfullpathdata();
  void set_allocated_planfullpathdata(::PB_PlanFullPath* planfullpathdata);
  private:
  const ::PB_PlanFullPath& _internal_planfullpathdata() const;
  ::PB_PlanFullPath* _internal_mutable_planfullpathdata();
  public:
  void unsafe_arena_set_allocated_planfullpathdata(
      ::PB_PlanFullPath* planfullpathdata);
  ::PB_PlanFullPath* unsafe_arena_release_planfullpathdata();

  // uint64 LSendTimsMs = 2;
  void clear_lsendtimsms();
  ::PROTOBUF_NAMESPACE_ID::uint64 lsendtimsms() const;
  void set_lsendtimsms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lsendtimsms() const;
  void _internal_set_lsendtimsms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 uSendNum = 3;
  void clear_usendnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 usendnum() const;
  void set_usendnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_usendnum() const;
  void _internal_set_usendnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PB_Hmi3dPackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PB_BaseHead* basehead_;
  ::PB_CanData* candata_;
  ::PB_UssSectorOutputData* usssectordata_;
  ::PB_ApaStateInfo* apastatedata_;
  ::PB_SlotInfo* slotdata_;
  ::PB_OdInfo* oddata_;
  ::PB_PlanTrackInfo* plantrackdata_;
  ::PB_PlanFullPath* planfullpathdata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lsendtimsms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 usendnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5f3d_5fpackage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PB_Hmi3dPackage

// .PB_BaseHead BaseHead = 1;
inline bool PB_Hmi3dPackage::_internal_has_basehead() const {
  return this != internal_default_instance() && basehead_ != nullptr;
}
inline bool PB_Hmi3dPackage::has_basehead() const {
  return _internal_has_basehead();
}
inline const ::PB_BaseHead& PB_Hmi3dPackage::_internal_basehead() const {
  const ::PB_BaseHead* p = basehead_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PB_BaseHead*>(
      &::_PB_BaseHead_default_instance_);
}
inline const ::PB_BaseHead& PB_Hmi3dPackage::basehead() const {
  // @@protoc_insertion_point(field_get:PB_Hmi3dPackage.BaseHead)
  return _internal_basehead();
}
inline void PB_Hmi3dPackage::unsafe_arena_set_allocated_basehead(
    ::PB_BaseHead* basehead) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(basehead_);
  }
  basehead_ = basehead;
  if (basehead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PB_Hmi3dPackage.BaseHead)
}
inline ::PB_BaseHead* PB_Hmi3dPackage::release_basehead() {
  auto temp = unsafe_arena_release_basehead();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PB_BaseHead* PB_Hmi3dPackage::unsafe_arena_release_basehead() {
  // @@protoc_insertion_point(field_release:PB_Hmi3dPackage.BaseHead)
  
  ::PB_BaseHead* temp = basehead_;
  basehead_ = nullptr;
  return temp;
}
inline ::PB_BaseHead* PB_Hmi3dPackage::_internal_mutable_basehead() {
  
  if (basehead_ == nullptr) {
    auto* p = CreateMaybeMessage<::PB_BaseHead>(GetArena());
    basehead_ = p;
  }
  return basehead_;
}
inline ::PB_BaseHead* PB_Hmi3dPackage::mutable_basehead() {
  // @@protoc_insertion_point(field_mutable:PB_Hmi3dPackage.BaseHead)
  return _internal_mutable_basehead();
}
inline void PB_Hmi3dPackage::set_allocated_basehead(::PB_BaseHead* basehead) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(basehead_);
  }
  if (basehead) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(basehead)->GetArena();
    if (message_arena != submessage_arena) {
      basehead = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basehead, submessage_arena);
    }
    
  } else {
    
  }
  basehead_ = basehead;
  // @@protoc_insertion_point(field_set_allocated:PB_Hmi3dPackage.BaseHead)
}

// uint64 LSendTimsMs = 2;
inline void PB_Hmi3dPackage::clear_lsendtimsms() {
  lsendtimsms_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PB_Hmi3dPackage::_internal_lsendtimsms() const {
  return lsendtimsms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PB_Hmi3dPackage::lsendtimsms() const {
  // @@protoc_insertion_point(field_get:PB_Hmi3dPackage.LSendTimsMs)
  return _internal_lsendtimsms();
}
inline void PB_Hmi3dPackage::_internal_set_lsendtimsms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lsendtimsms_ = value;
}
inline void PB_Hmi3dPackage::set_lsendtimsms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lsendtimsms(value);
  // @@protoc_insertion_point(field_set:PB_Hmi3dPackage.LSendTimsMs)
}

// uint32 uSendNum = 3;
inline void PB_Hmi3dPackage::clear_usendnum() {
  usendnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PB_Hmi3dPackage::_internal_usendnum() const {
  return usendnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PB_Hmi3dPackage::usendnum() const {
  // @@protoc_insertion_point(field_get:PB_Hmi3dPackage.uSendNum)
  return _internal_usendnum();
}
inline void PB_Hmi3dPackage::_internal_set_usendnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  usendnum_ = value;
}
inline void PB_Hmi3dPackage::set_usendnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_usendnum(value);
  // @@protoc_insertion_point(field_set:PB_Hmi3dPackage.uSendNum)
}

// .PB_CanData CanData = 4;
inline bool PB_Hmi3dPackage::_internal_has_candata() const {
  return this != internal_default_instance() && candata_ != nullptr;
}
inline bool PB_Hmi3dPackage::has_candata() const {
  return _internal_has_candata();
}
inline const ::PB_CanData& PB_Hmi3dPackage::_internal_candata() const {
  const ::PB_CanData* p = candata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PB_CanData*>(
      &::_PB_CanData_default_instance_);
}
inline const ::PB_CanData& PB_Hmi3dPackage::candata() const {
  // @@protoc_insertion_point(field_get:PB_Hmi3dPackage.CanData)
  return _internal_candata();
}
inline void PB_Hmi3dPackage::unsafe_arena_set_allocated_candata(
    ::PB_CanData* candata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(candata_);
  }
  candata_ = candata;
  if (candata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PB_Hmi3dPackage.CanData)
}
inline ::PB_CanData* PB_Hmi3dPackage::release_candata() {
  auto temp = unsafe_arena_release_candata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PB_CanData* PB_Hmi3dPackage::unsafe_arena_release_candata() {
  // @@protoc_insertion_point(field_release:PB_Hmi3dPackage.CanData)
  
  ::PB_CanData* temp = candata_;
  candata_ = nullptr;
  return temp;
}
inline ::PB_CanData* PB_Hmi3dPackage::_internal_mutable_candata() {
  
  if (candata_ == nullptr) {
    auto* p = CreateMaybeMessage<::PB_CanData>(GetArena());
    candata_ = p;
  }
  return candata_;
}
inline ::PB_CanData* PB_Hmi3dPackage::mutable_candata() {
  // @@protoc_insertion_point(field_mutable:PB_Hmi3dPackage.CanData)
  return _internal_mutable_candata();
}
inline void PB_Hmi3dPackage::set_allocated_candata(::PB_CanData* candata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(candata_);
  }
  if (candata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(candata)->GetArena();
    if (message_arena != submessage_arena) {
      candata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candata, submessage_arena);
    }
    
  } else {
    
  }
  candata_ = candata;
  // @@protoc_insertion_point(field_set_allocated:PB_Hmi3dPackage.CanData)
}

// .PB_UssSectorOutputData UssSectorData = 5;
inline bool PB_Hmi3dPackage::_internal_has_usssectordata() const {
  return this != internal_default_instance() && usssectordata_ != nullptr;
}
inline bool PB_Hmi3dPackage::has_usssectordata() const {
  return _internal_has_usssectordata();
}
inline const ::PB_UssSectorOutputData& PB_Hmi3dPackage::_internal_usssectordata() const {
  const ::PB_UssSectorOutputData* p = usssectordata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PB_UssSectorOutputData*>(
      &::_PB_UssSectorOutputData_default_instance_);
}
inline const ::PB_UssSectorOutputData& PB_Hmi3dPackage::usssectordata() const {
  // @@protoc_insertion_point(field_get:PB_Hmi3dPackage.UssSectorData)
  return _internal_usssectordata();
}
inline void PB_Hmi3dPackage::unsafe_arena_set_allocated_usssectordata(
    ::PB_UssSectorOutputData* usssectordata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usssectordata_);
  }
  usssectordata_ = usssectordata;
  if (usssectordata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PB_Hmi3dPackage.UssSectorData)
}
inline ::PB_UssSectorOutputData* PB_Hmi3dPackage::release_usssectordata() {
  auto temp = unsafe_arena_release_usssectordata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PB_UssSectorOutputData* PB_Hmi3dPackage::unsafe_arena_release_usssectordata() {
  // @@protoc_insertion_point(field_release:PB_Hmi3dPackage.UssSectorData)
  
  ::PB_UssSectorOutputData* temp = usssectordata_;
  usssectordata_ = nullptr;
  return temp;
}
inline ::PB_UssSectorOutputData* PB_Hmi3dPackage::_internal_mutable_usssectordata() {
  
  if (usssectordata_ == nullptr) {
    auto* p = CreateMaybeMessage<::PB_UssSectorOutputData>(GetArena());
    usssectordata_ = p;
  }
  return usssectordata_;
}
inline ::PB_UssSectorOutputData* PB_Hmi3dPackage::mutable_usssectordata() {
  // @@protoc_insertion_point(field_mutable:PB_Hmi3dPackage.UssSectorData)
  return _internal_mutable_usssectordata();
}
inline void PB_Hmi3dPackage::set_allocated_usssectordata(::PB_UssSectorOutputData* usssectordata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(usssectordata_);
  }
  if (usssectordata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usssectordata)->GetArena();
    if (message_arena != submessage_arena) {
      usssectordata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usssectordata, submessage_arena);
    }
    
  } else {
    
  }
  usssectordata_ = usssectordata;
  // @@protoc_insertion_point(field_set_allocated:PB_Hmi3dPackage.UssSectorData)
}

// .PB_ApaStateInfo ApaStateData = 6;
inline bool PB_Hmi3dPackage::_internal_has_apastatedata() const {
  return this != internal_default_instance() && apastatedata_ != nullptr;
}
inline bool PB_Hmi3dPackage::has_apastatedata() const {
  return _internal_has_apastatedata();
}
inline const ::PB_ApaStateInfo& PB_Hmi3dPackage::_internal_apastatedata() const {
  const ::PB_ApaStateInfo* p = apastatedata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PB_ApaStateInfo*>(
      &::_PB_ApaStateInfo_default_instance_);
}
inline const ::PB_ApaStateInfo& PB_Hmi3dPackage::apastatedata() const {
  // @@protoc_insertion_point(field_get:PB_Hmi3dPackage.ApaStateData)
  return _internal_apastatedata();
}
inline void PB_Hmi3dPackage::unsafe_arena_set_allocated_apastatedata(
    ::PB_ApaStateInfo* apastatedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(apastatedata_);
  }
  apastatedata_ = apastatedata;
  if (apastatedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PB_Hmi3dPackage.ApaStateData)
}
inline ::PB_ApaStateInfo* PB_Hmi3dPackage::release_apastatedata() {
  auto temp = unsafe_arena_release_apastatedata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PB_ApaStateInfo* PB_Hmi3dPackage::unsafe_arena_release_apastatedata() {
  // @@protoc_insertion_point(field_release:PB_Hmi3dPackage.ApaStateData)
  
  ::PB_ApaStateInfo* temp = apastatedata_;
  apastatedata_ = nullptr;
  return temp;
}
inline ::PB_ApaStateInfo* PB_Hmi3dPackage::_internal_mutable_apastatedata() {
  
  if (apastatedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::PB_ApaStateInfo>(GetArena());
    apastatedata_ = p;
  }
  return apastatedata_;
}
inline ::PB_ApaStateInfo* PB_Hmi3dPackage::mutable_apastatedata() {
  // @@protoc_insertion_point(field_mutable:PB_Hmi3dPackage.ApaStateData)
  return _internal_mutable_apastatedata();
}
inline void PB_Hmi3dPackage::set_allocated_apastatedata(::PB_ApaStateInfo* apastatedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(apastatedata_);
  }
  if (apastatedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(apastatedata)->GetArena();
    if (message_arena != submessage_arena) {
      apastatedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apastatedata, submessage_arena);
    }
    
  } else {
    
  }
  apastatedata_ = apastatedata;
  // @@protoc_insertion_point(field_set_allocated:PB_Hmi3dPackage.ApaStateData)
}

// .PB_SlotInfo SlotData = 7;
inline bool PB_Hmi3dPackage::_internal_has_slotdata() const {
  return this != internal_default_instance() && slotdata_ != nullptr;
}
inline bool PB_Hmi3dPackage::has_slotdata() const {
  return _internal_has_slotdata();
}
inline const ::PB_SlotInfo& PB_Hmi3dPackage::_internal_slotdata() const {
  const ::PB_SlotInfo* p = slotdata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PB_SlotInfo*>(
      &::_PB_SlotInfo_default_instance_);
}
inline const ::PB_SlotInfo& PB_Hmi3dPackage::slotdata() const {
  // @@protoc_insertion_point(field_get:PB_Hmi3dPackage.SlotData)
  return _internal_slotdata();
}
inline void PB_Hmi3dPackage::unsafe_arena_set_allocated_slotdata(
    ::PB_SlotInfo* slotdata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slotdata_);
  }
  slotdata_ = slotdata;
  if (slotdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PB_Hmi3dPackage.SlotData)
}
inline ::PB_SlotInfo* PB_Hmi3dPackage::release_slotdata() {
  auto temp = unsafe_arena_release_slotdata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PB_SlotInfo* PB_Hmi3dPackage::unsafe_arena_release_slotdata() {
  // @@protoc_insertion_point(field_release:PB_Hmi3dPackage.SlotData)
  
  ::PB_SlotInfo* temp = slotdata_;
  slotdata_ = nullptr;
  return temp;
}
inline ::PB_SlotInfo* PB_Hmi3dPackage::_internal_mutable_slotdata() {
  
  if (slotdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::PB_SlotInfo>(GetArena());
    slotdata_ = p;
  }
  return slotdata_;
}
inline ::PB_SlotInfo* PB_Hmi3dPackage::mutable_slotdata() {
  // @@protoc_insertion_point(field_mutable:PB_Hmi3dPackage.SlotData)
  return _internal_mutable_slotdata();
}
inline void PB_Hmi3dPackage::set_allocated_slotdata(::PB_SlotInfo* slotdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slotdata_);
  }
  if (slotdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slotdata)->GetArena();
    if (message_arena != submessage_arena) {
      slotdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slotdata, submessage_arena);
    }
    
  } else {
    
  }
  slotdata_ = slotdata;
  // @@protoc_insertion_point(field_set_allocated:PB_Hmi3dPackage.SlotData)
}

// .PB_OdInfo OdData = 8;
inline bool PB_Hmi3dPackage::_internal_has_oddata() const {
  return this != internal_default_instance() && oddata_ != nullptr;
}
inline bool PB_Hmi3dPackage::has_oddata() const {
  return _internal_has_oddata();
}
inline const ::PB_OdInfo& PB_Hmi3dPackage::_internal_oddata() const {
  const ::PB_OdInfo* p = oddata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PB_OdInfo*>(
      &::_PB_OdInfo_default_instance_);
}
inline const ::PB_OdInfo& PB_Hmi3dPackage::oddata() const {
  // @@protoc_insertion_point(field_get:PB_Hmi3dPackage.OdData)
  return _internal_oddata();
}
inline void PB_Hmi3dPackage::unsafe_arena_set_allocated_oddata(
    ::PB_OdInfo* oddata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oddata_);
  }
  oddata_ = oddata;
  if (oddata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PB_Hmi3dPackage.OdData)
}
inline ::PB_OdInfo* PB_Hmi3dPackage::release_oddata() {
  auto temp = unsafe_arena_release_oddata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PB_OdInfo* PB_Hmi3dPackage::unsafe_arena_release_oddata() {
  // @@protoc_insertion_point(field_release:PB_Hmi3dPackage.OdData)
  
  ::PB_OdInfo* temp = oddata_;
  oddata_ = nullptr;
  return temp;
}
inline ::PB_OdInfo* PB_Hmi3dPackage::_internal_mutable_oddata() {
  
  if (oddata_ == nullptr) {
    auto* p = CreateMaybeMessage<::PB_OdInfo>(GetArena());
    oddata_ = p;
  }
  return oddata_;
}
inline ::PB_OdInfo* PB_Hmi3dPackage::mutable_oddata() {
  // @@protoc_insertion_point(field_mutable:PB_Hmi3dPackage.OdData)
  return _internal_mutable_oddata();
}
inline void PB_Hmi3dPackage::set_allocated_oddata(::PB_OdInfo* oddata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oddata_);
  }
  if (oddata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oddata)->GetArena();
    if (message_arena != submessage_arena) {
      oddata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oddata, submessage_arena);
    }
    
  } else {
    
  }
  oddata_ = oddata;
  // @@protoc_insertion_point(field_set_allocated:PB_Hmi3dPackage.OdData)
}

// .PB_PlanTrackInfo PlanTrackData = 9;
inline bool PB_Hmi3dPackage::_internal_has_plantrackdata() const {
  return this != internal_default_instance() && plantrackdata_ != nullptr;
}
inline bool PB_Hmi3dPackage::has_plantrackdata() const {
  return _internal_has_plantrackdata();
}
inline const ::PB_PlanTrackInfo& PB_Hmi3dPackage::_internal_plantrackdata() const {
  const ::PB_PlanTrackInfo* p = plantrackdata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PB_PlanTrackInfo*>(
      &::_PB_PlanTrackInfo_default_instance_);
}
inline const ::PB_PlanTrackInfo& PB_Hmi3dPackage::plantrackdata() const {
  // @@protoc_insertion_point(field_get:PB_Hmi3dPackage.PlanTrackData)
  return _internal_plantrackdata();
}
inline void PB_Hmi3dPackage::unsafe_arena_set_allocated_plantrackdata(
    ::PB_PlanTrackInfo* plantrackdata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plantrackdata_);
  }
  plantrackdata_ = plantrackdata;
  if (plantrackdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PB_Hmi3dPackage.PlanTrackData)
}
inline ::PB_PlanTrackInfo* PB_Hmi3dPackage::release_plantrackdata() {
  auto temp = unsafe_arena_release_plantrackdata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PB_PlanTrackInfo* PB_Hmi3dPackage::unsafe_arena_release_plantrackdata() {
  // @@protoc_insertion_point(field_release:PB_Hmi3dPackage.PlanTrackData)
  
  ::PB_PlanTrackInfo* temp = plantrackdata_;
  plantrackdata_ = nullptr;
  return temp;
}
inline ::PB_PlanTrackInfo* PB_Hmi3dPackage::_internal_mutable_plantrackdata() {
  
  if (plantrackdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::PB_PlanTrackInfo>(GetArena());
    plantrackdata_ = p;
  }
  return plantrackdata_;
}
inline ::PB_PlanTrackInfo* PB_Hmi3dPackage::mutable_plantrackdata() {
  // @@protoc_insertion_point(field_mutable:PB_Hmi3dPackage.PlanTrackData)
  return _internal_mutable_plantrackdata();
}
inline void PB_Hmi3dPackage::set_allocated_plantrackdata(::PB_PlanTrackInfo* plantrackdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(plantrackdata_);
  }
  if (plantrackdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plantrackdata)->GetArena();
    if (message_arena != submessage_arena) {
      plantrackdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plantrackdata, submessage_arena);
    }
    
  } else {
    
  }
  plantrackdata_ = plantrackdata;
  // @@protoc_insertion_point(field_set_allocated:PB_Hmi3dPackage.PlanTrackData)
}

// .PB_PlanFullPath PlanFullPathData = 10;
inline bool PB_Hmi3dPackage::_internal_has_planfullpathdata() const {
  return this != internal_default_instance() && planfullpathdata_ != nullptr;
}
inline bool PB_Hmi3dPackage::has_planfullpathdata() const {
  return _internal_has_planfullpathdata();
}
inline const ::PB_PlanFullPath& PB_Hmi3dPackage::_internal_planfullpathdata() const {
  const ::PB_PlanFullPath* p = planfullpathdata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PB_PlanFullPath*>(
      &::_PB_PlanFullPath_default_instance_);
}
inline const ::PB_PlanFullPath& PB_Hmi3dPackage::planfullpathdata() const {
  // @@protoc_insertion_point(field_get:PB_Hmi3dPackage.PlanFullPathData)
  return _internal_planfullpathdata();
}
inline void PB_Hmi3dPackage::unsafe_arena_set_allocated_planfullpathdata(
    ::PB_PlanFullPath* planfullpathdata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(planfullpathdata_);
  }
  planfullpathdata_ = planfullpathdata;
  if (planfullpathdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PB_Hmi3dPackage.PlanFullPathData)
}
inline ::PB_PlanFullPath* PB_Hmi3dPackage::release_planfullpathdata() {
  auto temp = unsafe_arena_release_planfullpathdata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PB_PlanFullPath* PB_Hmi3dPackage::unsafe_arena_release_planfullpathdata() {
  // @@protoc_insertion_point(field_release:PB_Hmi3dPackage.PlanFullPathData)
  
  ::PB_PlanFullPath* temp = planfullpathdata_;
  planfullpathdata_ = nullptr;
  return temp;
}
inline ::PB_PlanFullPath* PB_Hmi3dPackage::_internal_mutable_planfullpathdata() {
  
  if (planfullpathdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::PB_PlanFullPath>(GetArena());
    planfullpathdata_ = p;
  }
  return planfullpathdata_;
}
inline ::PB_PlanFullPath* PB_Hmi3dPackage::mutable_planfullpathdata() {
  // @@protoc_insertion_point(field_mutable:PB_Hmi3dPackage.PlanFullPathData)
  return _internal_mutable_planfullpathdata();
}
inline void PB_Hmi3dPackage::set_allocated_planfullpathdata(::PB_PlanFullPath* planfullpathdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(planfullpathdata_);
  }
  if (planfullpathdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(planfullpathdata)->GetArena();
    if (message_arena != submessage_arena) {
      planfullpathdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, planfullpathdata, submessage_arena);
    }
    
  } else {
    
  }
  planfullpathdata_ = planfullpathdata;
  // @@protoc_insertion_point(field_set_allocated:PB_Hmi3dPackage.PlanFullPathData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hmi_5f3d_5fpackage_2eproto
