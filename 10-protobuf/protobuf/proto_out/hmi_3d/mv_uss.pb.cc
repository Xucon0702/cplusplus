// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_3d/mv_uss.proto

#include "hmi_3d/mv_uss.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_hmi_5f3d_2fmv_5fuss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PB_UssSectorInfo_hmi_5f3d_2fmv_5fuss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hmi_5f3d_2fmv_5fuss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PB_UssSector_FrameHeader_hmi_5f3d_2fmv_5fuss_2eproto;
class PB_UssSector_FrameHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PB_UssSector_FrameHeader> _instance;
} _PB_UssSector_FrameHeader_default_instance_;
class PB_UssSectorInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PB_UssSectorInfo> _instance;
} _PB_UssSectorInfo_default_instance_;
class PB_UssSectorOutputDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PB_UssSectorOutputData> _instance;
} _PB_UssSectorOutputData_default_instance_;
static void InitDefaultsscc_info_PB_UssSectorInfo_hmi_5f3d_2fmv_5fuss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PB_UssSectorInfo_default_instance_;
    new (ptr) ::PB_UssSectorInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PB_UssSectorInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PB_UssSectorInfo_hmi_5f3d_2fmv_5fuss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PB_UssSectorInfo_hmi_5f3d_2fmv_5fuss_2eproto}, {}};

static void InitDefaultsscc_info_PB_UssSectorOutputData_hmi_5f3d_2fmv_5fuss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PB_UssSectorOutputData_default_instance_;
    new (ptr) ::PB_UssSectorOutputData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PB_UssSectorOutputData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PB_UssSectorOutputData_hmi_5f3d_2fmv_5fuss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PB_UssSectorOutputData_hmi_5f3d_2fmv_5fuss_2eproto}, {
      &scc_info_PB_UssSector_FrameHeader_hmi_5f3d_2fmv_5fuss_2eproto.base,
      &scc_info_PB_UssSectorInfo_hmi_5f3d_2fmv_5fuss_2eproto.base,}};

static void InitDefaultsscc_info_PB_UssSector_FrameHeader_hmi_5f3d_2fmv_5fuss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PB_UssSector_FrameHeader_default_instance_;
    new (ptr) ::PB_UssSector_FrameHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PB_UssSector_FrameHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PB_UssSector_FrameHeader_hmi_5f3d_2fmv_5fuss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PB_UssSector_FrameHeader_hmi_5f3d_2fmv_5fuss_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hmi_5f3d_2fmv_5fuss_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_hmi_5f3d_2fmv_5fuss_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hmi_5f3d_2fmv_5fuss_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_hmi_5f3d_2fmv_5fuss_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PB_UssSector_FrameHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PB_UssSector_FrameHeader, nframeid_),
  PROTOBUF_FIELD_OFFSET(::PB_UssSector_FrameHeader, itimemsec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PB_UssSectorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PB_UssSectorInfo, pdc_distance_),
  PROTOBUF_FIELD_OFFSET(::PB_UssSectorInfo, sensorstatus_),
  PROTOBUF_FIELD_OFFSET(::PB_UssSectorInfo, systemstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PB_UssSectorOutputData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PB_UssSectorOutputData, framehead_),
  PROTOBUF_FIELD_OFFSET(::PB_UssSectorOutputData, sectordata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PB_UssSector_FrameHeader)},
  { 7, -1, sizeof(::PB_UssSectorInfo)},
  { 15, -1, sizeof(::PB_UssSectorOutputData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PB_UssSector_FrameHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PB_UssSectorInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PB_UssSectorOutputData_default_instance_),
};

const char descriptor_table_protodef_hmi_5f3d_2fmv_5fuss_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023hmi_3d/mv_uss.proto\"\?\n\030PB_UssSector_Fr"
  "ameHeader\022\020\n\010nFrameId\030\001 \001(\r\022\021\n\tITimeMsec"
  "\030\002 \001(\004\"T\n\020PB_UssSectorInfo\022\024\n\014PDC_Distan"
  "ce\030\001 \003(\r\022\024\n\014SensorStatus\030\002 \003(\r\022\024\n\014System"
  "Status\030\003 \001(\r\"m\n\026PB_UssSectorOutputData\022,"
  "\n\tFrameHead\030\001 \001(\0132\031.PB_UssSector_FrameHe"
  "ader\022%\n\nSectorData\030\002 \001(\0132\021.PB_UssSectorI"
  "nfob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_hmi_5f3d_2fmv_5fuss_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_hmi_5f3d_2fmv_5fuss_2eproto_sccs[3] = {
  &scc_info_PB_UssSectorInfo_hmi_5f3d_2fmv_5fuss_2eproto.base,
  &scc_info_PB_UssSectorOutputData_hmi_5f3d_2fmv_5fuss_2eproto.base,
  &scc_info_PB_UssSector_FrameHeader_hmi_5f3d_2fmv_5fuss_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hmi_5f3d_2fmv_5fuss_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hmi_5f3d_2fmv_5fuss_2eproto = {
  false, false, descriptor_table_protodef_hmi_5f3d_2fmv_5fuss_2eproto, "hmi_3d/mv_uss.proto", 291,
  &descriptor_table_hmi_5f3d_2fmv_5fuss_2eproto_once, descriptor_table_hmi_5f3d_2fmv_5fuss_2eproto_sccs, descriptor_table_hmi_5f3d_2fmv_5fuss_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_hmi_5f3d_2fmv_5fuss_2eproto::offsets,
  file_level_metadata_hmi_5f3d_2fmv_5fuss_2eproto, 3, file_level_enum_descriptors_hmi_5f3d_2fmv_5fuss_2eproto, file_level_service_descriptors_hmi_5f3d_2fmv_5fuss_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_hmi_5f3d_2fmv_5fuss_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_hmi_5f3d_2fmv_5fuss_2eproto)), true);

// ===================================================================

void PB_UssSector_FrameHeader::InitAsDefaultInstance() {
}
class PB_UssSector_FrameHeader::_Internal {
 public:
};

PB_UssSector_FrameHeader::PB_UssSector_FrameHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PB_UssSector_FrameHeader)
}
PB_UssSector_FrameHeader::PB_UssSector_FrameHeader(const PB_UssSector_FrameHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&itimemsec_, &from.itimemsec_,
    static_cast<size_t>(reinterpret_cast<char*>(&nframeid_) -
    reinterpret_cast<char*>(&itimemsec_)) + sizeof(nframeid_));
  // @@protoc_insertion_point(copy_constructor:PB_UssSector_FrameHeader)
}

void PB_UssSector_FrameHeader::SharedCtor() {
  ::memset(&itimemsec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nframeid_) -
      reinterpret_cast<char*>(&itimemsec_)) + sizeof(nframeid_));
}

PB_UssSector_FrameHeader::~PB_UssSector_FrameHeader() {
  // @@protoc_insertion_point(destructor:PB_UssSector_FrameHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PB_UssSector_FrameHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PB_UssSector_FrameHeader::ArenaDtor(void* object) {
  PB_UssSector_FrameHeader* _this = reinterpret_cast< PB_UssSector_FrameHeader* >(object);
  (void)_this;
}
void PB_UssSector_FrameHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_UssSector_FrameHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PB_UssSector_FrameHeader& PB_UssSector_FrameHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PB_UssSector_FrameHeader_hmi_5f3d_2fmv_5fuss_2eproto.base);
  return *internal_default_instance();
}


void PB_UssSector_FrameHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:PB_UssSector_FrameHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&itimemsec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nframeid_) -
      reinterpret_cast<char*>(&itimemsec_)) + sizeof(nframeid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_UssSector_FrameHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 nFrameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nframeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ITimeMsec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          itimemsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PB_UssSector_FrameHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_UssSector_FrameHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 nFrameId = 1;
  if (this->nframeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_nframeid(), target);
  }

  // uint64 ITimeMsec = 2;
  if (this->itimemsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_itimemsec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_UssSector_FrameHeader)
  return target;
}

size_t PB_UssSector_FrameHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB_UssSector_FrameHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 ITimeMsec = 2;
  if (this->itimemsec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_itimemsec());
  }

  // uint32 nFrameId = 1;
  if (this->nframeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nframeid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PB_UssSector_FrameHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PB_UssSector_FrameHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_UssSector_FrameHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PB_UssSector_FrameHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PB_UssSector_FrameHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PB_UssSector_FrameHeader)
    MergeFrom(*source);
  }
}

void PB_UssSector_FrameHeader::MergeFrom(const PB_UssSector_FrameHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB_UssSector_FrameHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.itimemsec() != 0) {
    _internal_set_itimemsec(from._internal_itimemsec());
  }
  if (from.nframeid() != 0) {
    _internal_set_nframeid(from._internal_nframeid());
  }
}

void PB_UssSector_FrameHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PB_UssSector_FrameHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_UssSector_FrameHeader::CopyFrom(const PB_UssSector_FrameHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB_UssSector_FrameHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_UssSector_FrameHeader::IsInitialized() const {
  return true;
}

void PB_UssSector_FrameHeader::InternalSwap(PB_UssSector_FrameHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_UssSector_FrameHeader, nframeid_)
      + sizeof(PB_UssSector_FrameHeader::nframeid_)
      - PROTOBUF_FIELD_OFFSET(PB_UssSector_FrameHeader, itimemsec_)>(
          reinterpret_cast<char*>(&itimemsec_),
          reinterpret_cast<char*>(&other->itimemsec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_UssSector_FrameHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PB_UssSectorInfo::InitAsDefaultInstance() {
}
class PB_UssSectorInfo::_Internal {
 public:
};

PB_UssSectorInfo::PB_UssSectorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pdc_distance_(arena),
  sensorstatus_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PB_UssSectorInfo)
}
PB_UssSectorInfo::PB_UssSectorInfo(const PB_UssSectorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pdc_distance_(from.pdc_distance_),
      sensorstatus_(from.sensorstatus_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  systemstatus_ = from.systemstatus_;
  // @@protoc_insertion_point(copy_constructor:PB_UssSectorInfo)
}

void PB_UssSectorInfo::SharedCtor() {
  systemstatus_ = 0u;
}

PB_UssSectorInfo::~PB_UssSectorInfo() {
  // @@protoc_insertion_point(destructor:PB_UssSectorInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PB_UssSectorInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PB_UssSectorInfo::ArenaDtor(void* object) {
  PB_UssSectorInfo* _this = reinterpret_cast< PB_UssSectorInfo* >(object);
  (void)_this;
}
void PB_UssSectorInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_UssSectorInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PB_UssSectorInfo& PB_UssSectorInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PB_UssSectorInfo_hmi_5f3d_2fmv_5fuss_2eproto.base);
  return *internal_default_instance();
}


void PB_UssSectorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PB_UssSectorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pdc_distance_.Clear();
  sensorstatus_.Clear();
  systemstatus_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_UssSectorInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 PDC_Distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_pdc_distance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_pdc_distance(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 SensorStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_sensorstatus(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_sensorstatus(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SystemStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          systemstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PB_UssSectorInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_UssSectorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 PDC_Distance = 1;
  {
    int byte_size = _pdc_distance_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_pdc_distance(), byte_size, target);
    }
  }

  // repeated uint32 SensorStatus = 2;
  {
    int byte_size = _sensorstatus_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_sensorstatus(), byte_size, target);
    }
  }

  // uint32 SystemStatus = 3;
  if (this->systemstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_systemstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_UssSectorInfo)
  return target;
}

size_t PB_UssSectorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB_UssSectorInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 PDC_Distance = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->pdc_distance_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pdc_distance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 SensorStatus = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->sensorstatus_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sensorstatus_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 SystemStatus = 3;
  if (this->systemstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_systemstatus());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PB_UssSectorInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PB_UssSectorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_UssSectorInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PB_UssSectorInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PB_UssSectorInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PB_UssSectorInfo)
    MergeFrom(*source);
  }
}

void PB_UssSectorInfo::MergeFrom(const PB_UssSectorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB_UssSectorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pdc_distance_.MergeFrom(from.pdc_distance_);
  sensorstatus_.MergeFrom(from.sensorstatus_);
  if (from.systemstatus() != 0) {
    _internal_set_systemstatus(from._internal_systemstatus());
  }
}

void PB_UssSectorInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PB_UssSectorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_UssSectorInfo::CopyFrom(const PB_UssSectorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB_UssSectorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_UssSectorInfo::IsInitialized() const {
  return true;
}

void PB_UssSectorInfo::InternalSwap(PB_UssSectorInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pdc_distance_.InternalSwap(&other->pdc_distance_);
  sensorstatus_.InternalSwap(&other->sensorstatus_);
  swap(systemstatus_, other->systemstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_UssSectorInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PB_UssSectorOutputData::InitAsDefaultInstance() {
  ::_PB_UssSectorOutputData_default_instance_._instance.get_mutable()->framehead_ = const_cast< ::PB_UssSector_FrameHeader*>(
      ::PB_UssSector_FrameHeader::internal_default_instance());
  ::_PB_UssSectorOutputData_default_instance_._instance.get_mutable()->sectordata_ = const_cast< ::PB_UssSectorInfo*>(
      ::PB_UssSectorInfo::internal_default_instance());
}
class PB_UssSectorOutputData::_Internal {
 public:
  static const ::PB_UssSector_FrameHeader& framehead(const PB_UssSectorOutputData* msg);
  static const ::PB_UssSectorInfo& sectordata(const PB_UssSectorOutputData* msg);
};

const ::PB_UssSector_FrameHeader&
PB_UssSectorOutputData::_Internal::framehead(const PB_UssSectorOutputData* msg) {
  return *msg->framehead_;
}
const ::PB_UssSectorInfo&
PB_UssSectorOutputData::_Internal::sectordata(const PB_UssSectorOutputData* msg) {
  return *msg->sectordata_;
}
PB_UssSectorOutputData::PB_UssSectorOutputData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PB_UssSectorOutputData)
}
PB_UssSectorOutputData::PB_UssSectorOutputData(const PB_UssSectorOutputData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_framehead()) {
    framehead_ = new ::PB_UssSector_FrameHeader(*from.framehead_);
  } else {
    framehead_ = nullptr;
  }
  if (from._internal_has_sectordata()) {
    sectordata_ = new ::PB_UssSectorInfo(*from.sectordata_);
  } else {
    sectordata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PB_UssSectorOutputData)
}

void PB_UssSectorOutputData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PB_UssSectorOutputData_hmi_5f3d_2fmv_5fuss_2eproto.base);
  ::memset(&framehead_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sectordata_) -
      reinterpret_cast<char*>(&framehead_)) + sizeof(sectordata_));
}

PB_UssSectorOutputData::~PB_UssSectorOutputData() {
  // @@protoc_insertion_point(destructor:PB_UssSectorOutputData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PB_UssSectorOutputData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete framehead_;
  if (this != internal_default_instance()) delete sectordata_;
}

void PB_UssSectorOutputData::ArenaDtor(void* object) {
  PB_UssSectorOutputData* _this = reinterpret_cast< PB_UssSectorOutputData* >(object);
  (void)_this;
}
void PB_UssSectorOutputData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_UssSectorOutputData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PB_UssSectorOutputData& PB_UssSectorOutputData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PB_UssSectorOutputData_hmi_5f3d_2fmv_5fuss_2eproto.base);
  return *internal_default_instance();
}


void PB_UssSectorOutputData::Clear() {
// @@protoc_insertion_point(message_clear_start:PB_UssSectorOutputData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && framehead_ != nullptr) {
    delete framehead_;
  }
  framehead_ = nullptr;
  if (GetArena() == nullptr && sectordata_ != nullptr) {
    delete sectordata_;
  }
  sectordata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_UssSectorOutputData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PB_UssSector_FrameHeader FrameHead = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_framehead(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PB_UssSectorInfo SectorData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sectordata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PB_UssSectorOutputData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_UssSectorOutputData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PB_UssSector_FrameHeader FrameHead = 1;
  if (this->has_framehead()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::framehead(this), target, stream);
  }

  // .PB_UssSectorInfo SectorData = 2;
  if (this->has_sectordata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sectordata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_UssSectorOutputData)
  return target;
}

size_t PB_UssSectorOutputData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB_UssSectorOutputData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PB_UssSector_FrameHeader FrameHead = 1;
  if (this->has_framehead()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *framehead_);
  }

  // .PB_UssSectorInfo SectorData = 2;
  if (this->has_sectordata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sectordata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PB_UssSectorOutputData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PB_UssSectorOutputData)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_UssSectorOutputData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PB_UssSectorOutputData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PB_UssSectorOutputData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PB_UssSectorOutputData)
    MergeFrom(*source);
  }
}

void PB_UssSectorOutputData::MergeFrom(const PB_UssSectorOutputData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB_UssSectorOutputData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_framehead()) {
    _internal_mutable_framehead()->::PB_UssSector_FrameHeader::MergeFrom(from._internal_framehead());
  }
  if (from.has_sectordata()) {
    _internal_mutable_sectordata()->::PB_UssSectorInfo::MergeFrom(from._internal_sectordata());
  }
}

void PB_UssSectorOutputData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PB_UssSectorOutputData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_UssSectorOutputData::CopyFrom(const PB_UssSectorOutputData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB_UssSectorOutputData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_UssSectorOutputData::IsInitialized() const {
  return true;
}

void PB_UssSectorOutputData::InternalSwap(PB_UssSectorOutputData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_UssSectorOutputData, sectordata_)
      + sizeof(PB_UssSectorOutputData::sectordata_)
      - PROTOBUF_FIELD_OFFSET(PB_UssSectorOutputData, framehead_)>(
          reinterpret_cast<char*>(&framehead_),
          reinterpret_cast<char*>(&other->framehead_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_UssSectorOutputData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PB_UssSector_FrameHeader* Arena::CreateMaybeMessage< ::PB_UssSector_FrameHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PB_UssSector_FrameHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::PB_UssSectorInfo* Arena::CreateMaybeMessage< ::PB_UssSectorInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PB_UssSectorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PB_UssSectorOutputData* Arena::CreateMaybeMessage< ::PB_UssSectorOutputData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PB_UssSectorOutputData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
