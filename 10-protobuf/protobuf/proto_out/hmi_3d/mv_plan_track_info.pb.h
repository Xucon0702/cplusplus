// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_3d/mv_plan_track_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto;
class PB_Location;
class PB_LocationDefaultTypeInternal;
extern PB_LocationDefaultTypeInternal _PB_Location_default_instance_;
class PB_PlanToHdmi;
class PB_PlanToHdmiDefaultTypeInternal;
extern PB_PlanToHdmiDefaultTypeInternal _PB_PlanToHdmi_default_instance_;
class PB_PlanTrackInfo;
class PB_PlanTrackInfoDefaultTypeInternal;
extern PB_PlanTrackInfoDefaultTypeInternal _PB_PlanTrackInfo_default_instance_;
class PB_TargetTrack;
class PB_TargetTrackDefaultTypeInternal;
extern PB_TargetTrackDefaultTypeInternal _PB_TargetTrack_default_instance_;
class PB_Vector2D;
class PB_Vector2DDefaultTypeInternal;
extern PB_Vector2DDefaultTypeInternal _PB_Vector2D_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PB_Location* Arena::CreateMaybeMessage<::PB_Location>(Arena*);
template<> ::PB_PlanToHdmi* Arena::CreateMaybeMessage<::PB_PlanToHdmi>(Arena*);
template<> ::PB_PlanTrackInfo* Arena::CreateMaybeMessage<::PB_PlanTrackInfo>(Arena*);
template<> ::PB_TargetTrack* Arena::CreateMaybeMessage<::PB_TargetTrack>(Arena*);
template<> ::PB_Vector2D* Arena::CreateMaybeMessage<::PB_Vector2D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PB_Vector2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PB_Vector2D) */ {
 public:
  inline PB_Vector2D() : PB_Vector2D(nullptr) {};
  virtual ~PB_Vector2D();

  PB_Vector2D(const PB_Vector2D& from);
  PB_Vector2D(PB_Vector2D&& from) noexcept
    : PB_Vector2D() {
    *this = ::std::move(from);
  }

  inline PB_Vector2D& operator=(const PB_Vector2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_Vector2D& operator=(PB_Vector2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PB_Vector2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PB_Vector2D* internal_default_instance() {
    return reinterpret_cast<const PB_Vector2D*>(
               &_PB_Vector2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PB_Vector2D& a, PB_Vector2D& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_Vector2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_Vector2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PB_Vector2D* New() const final {
    return CreateMaybeMessage<PB_Vector2D>(nullptr);
  }

  PB_Vector2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PB_Vector2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PB_Vector2D& from);
  void MergeFrom(const PB_Vector2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_Vector2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PB_Vector2D";
  }
  protected:
  explicit PB_Vector2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto);
    return ::descriptor_table_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:PB_Vector2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto;
};
// -------------------------------------------------------------------

class PB_Location PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PB_Location) */ {
 public:
  inline PB_Location() : PB_Location(nullptr) {};
  virtual ~PB_Location();

  PB_Location(const PB_Location& from);
  PB_Location(PB_Location&& from) noexcept
    : PB_Location() {
    *this = ::std::move(from);
  }

  inline PB_Location& operator=(const PB_Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_Location& operator=(PB_Location&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PB_Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PB_Location* internal_default_instance() {
    return reinterpret_cast<const PB_Location*>(
               &_PB_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PB_Location& a, PB_Location& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_Location* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PB_Location* New() const final {
    return CreateMaybeMessage<PB_Location>(nullptr);
  }

  PB_Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PB_Location>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PB_Location& from);
  void MergeFrom(const PB_Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PB_Location";
  }
  protected:
  explicit PB_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto);
    return ::descriptor_table_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kYawFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float yaw = 3;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:PB_Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto;
};
// -------------------------------------------------------------------

class PB_TargetTrack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PB_TargetTrack) */ {
 public:
  inline PB_TargetTrack() : PB_TargetTrack(nullptr) {};
  virtual ~PB_TargetTrack();

  PB_TargetTrack(const PB_TargetTrack& from);
  PB_TargetTrack(PB_TargetTrack&& from) noexcept
    : PB_TargetTrack() {
    *this = ::std::move(from);
  }

  inline PB_TargetTrack& operator=(const PB_TargetTrack& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_TargetTrack& operator=(PB_TargetTrack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PB_TargetTrack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PB_TargetTrack* internal_default_instance() {
    return reinterpret_cast<const PB_TargetTrack*>(
               &_PB_TargetTrack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PB_TargetTrack& a, PB_TargetTrack& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_TargetTrack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_TargetTrack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PB_TargetTrack* New() const final {
    return CreateMaybeMessage<PB_TargetTrack>(nullptr);
  }

  PB_TargetTrack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PB_TargetTrack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PB_TargetTrack& from);
  void MergeFrom(const PB_TargetTrack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_TargetTrack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PB_TargetTrack";
  }
  protected:
  explicit PB_TargetTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto);
    return ::descriptor_table_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
    kYawFieldNumber = 2,
    kCurvatureFieldNumber = 3,
    kSpeedFieldNumber = 4,
    kNDetectStatesFieldNumber = 5,
  };
  // .PB_Vector2D point = 1;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  const ::PB_Vector2D& point() const;
  ::PB_Vector2D* release_point();
  ::PB_Vector2D* mutable_point();
  void set_allocated_point(::PB_Vector2D* point);
  private:
  const ::PB_Vector2D& _internal_point() const;
  ::PB_Vector2D* _internal_mutable_point();
  public:
  void unsafe_arena_set_allocated_point(
      ::PB_Vector2D* point);
  ::PB_Vector2D* unsafe_arena_release_point();

  // float yaw = 2;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float curvature = 3;
  void clear_curvature();
  float curvature() const;
  void set_curvature(float value);
  private:
  float _internal_curvature() const;
  void _internal_set_curvature(float value);
  public:

  // float speed = 4;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // int32 nDetectStates = 5;
  void clear_ndetectstates();
  ::PROTOBUF_NAMESPACE_ID::int32 ndetectstates() const;
  void set_ndetectstates(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ndetectstates() const;
  void _internal_set_ndetectstates(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PB_TargetTrack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PB_Vector2D* point_;
  float yaw_;
  float curvature_;
  float speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 ndetectstates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto;
};
// -------------------------------------------------------------------

class PB_PlanToHdmi PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PB_PlanToHdmi) */ {
 public:
  inline PB_PlanToHdmi() : PB_PlanToHdmi(nullptr) {};
  virtual ~PB_PlanToHdmi();

  PB_PlanToHdmi(const PB_PlanToHdmi& from);
  PB_PlanToHdmi(PB_PlanToHdmi&& from) noexcept
    : PB_PlanToHdmi() {
    *this = ::std::move(from);
  }

  inline PB_PlanToHdmi& operator=(const PB_PlanToHdmi& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_PlanToHdmi& operator=(PB_PlanToHdmi&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PB_PlanToHdmi& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PB_PlanToHdmi* internal_default_instance() {
    return reinterpret_cast<const PB_PlanToHdmi*>(
               &_PB_PlanToHdmi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PB_PlanToHdmi& a, PB_PlanToHdmi& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_PlanToHdmi* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_PlanToHdmi* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PB_PlanToHdmi* New() const final {
    return CreateMaybeMessage<PB_PlanToHdmi>(nullptr);
  }

  PB_PlanToHdmi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PB_PlanToHdmi>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PB_PlanToHdmi& from);
  void MergeFrom(const PB_PlanToHdmi& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_PlanToHdmi* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PB_PlanToHdmi";
  }
  protected:
  explicit PB_PlanToHdmi(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto);
    return ::descriptor_table_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPxFieldNumber = 7,
    kPyFieldNumber = 8,
    kUCmdFieldNumber = 1,
    kUStatueFieldNumber = 2,
    kUTotalStepFieldNumber = 3,
    kUCurrentStepFieldNumber = 4,
    kUDisStepFieldNumber = 5,
    kUPlanOutDetectStsFieldNumber = 6,
  };
  // repeated float px = 7;
  int px_size() const;
  private:
  int _internal_px_size() const;
  public:
  void clear_px();
  private:
  float _internal_px(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_px() const;
  void _internal_add_px(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_px();
  public:
  float px(int index) const;
  void set_px(int index, float value);
  void add_px(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      px() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_px();

  // repeated float py = 8;
  int py_size() const;
  private:
  int _internal_py_size() const;
  public:
  void clear_py();
  private:
  float _internal_py(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_py() const;
  void _internal_add_py(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_py();
  public:
  float py(int index) const;
  void set_py(int index, float value);
  void add_py(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      py() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_py();

  // uint32 uCmd = 1;
  void clear_ucmd();
  ::PROTOBUF_NAMESPACE_ID::uint32 ucmd() const;
  void set_ucmd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ucmd() const;
  void _internal_set_ucmd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uStatue = 2;
  void clear_ustatue();
  ::PROTOBUF_NAMESPACE_ID::uint32 ustatue() const;
  void set_ustatue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ustatue() const;
  void _internal_set_ustatue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uTotalStep = 3;
  void clear_utotalstep();
  ::PROTOBUF_NAMESPACE_ID::uint32 utotalstep() const;
  void set_utotalstep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utotalstep() const;
  void _internal_set_utotalstep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uCurrentStep = 4;
  void clear_ucurrentstep();
  ::PROTOBUF_NAMESPACE_ID::uint32 ucurrentstep() const;
  void set_ucurrentstep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ucurrentstep() const;
  void _internal_set_ucurrentstep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uDisStep = 5;
  void clear_udisstep();
  ::PROTOBUF_NAMESPACE_ID::uint32 udisstep() const;
  void set_udisstep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_udisstep() const;
  void _internal_set_udisstep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uPlanOutDetectSts = 6;
  void clear_uplanoutdetectsts();
  ::PROTOBUF_NAMESPACE_ID::uint32 uplanoutdetectsts() const;
  void set_uplanoutdetectsts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uplanoutdetectsts() const;
  void _internal_set_uplanoutdetectsts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PB_PlanToHdmi)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > px_;
  mutable std::atomic<int> _px_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > py_;
  mutable std::atomic<int> _py_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ucmd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ustatue_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utotalstep_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ucurrentstep_;
  ::PROTOBUF_NAMESPACE_ID::uint32 udisstep_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uplanoutdetectsts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto;
};
// -------------------------------------------------------------------

class PB_PlanTrackInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PB_PlanTrackInfo) */ {
 public:
  inline PB_PlanTrackInfo() : PB_PlanTrackInfo(nullptr) {};
  virtual ~PB_PlanTrackInfo();

  PB_PlanTrackInfo(const PB_PlanTrackInfo& from);
  PB_PlanTrackInfo(PB_PlanTrackInfo&& from) noexcept
    : PB_PlanTrackInfo() {
    *this = ::std::move(from);
  }

  inline PB_PlanTrackInfo& operator=(const PB_PlanTrackInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_PlanTrackInfo& operator=(PB_PlanTrackInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PB_PlanTrackInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PB_PlanTrackInfo* internal_default_instance() {
    return reinterpret_cast<const PB_PlanTrackInfo*>(
               &_PB_PlanTrackInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PB_PlanTrackInfo& a, PB_PlanTrackInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_PlanTrackInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_PlanTrackInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PB_PlanTrackInfo* New() const final {
    return CreateMaybeMessage<PB_PlanTrackInfo>(nullptr);
  }

  PB_PlanTrackInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PB_PlanTrackInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PB_PlanTrackInfo& from);
  void MergeFrom(const PB_PlanTrackInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_PlanTrackInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PB_PlanTrackInfo";
  }
  protected:
  explicit PB_PlanTrackInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto);
    return ::descriptor_table_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kATracksPlanFieldNumber = 4,
    kTPlanToHdmiFieldNumber = 3,
    kSyncDrFieldNumber = 5,
    kLTimeMsecFieldNumber = 1,
    kValidNumFieldNumber = 2,
  };
  // repeated .PB_TargetTrack aTracksPlan = 4;
  int atracksplan_size() const;
  private:
  int _internal_atracksplan_size() const;
  public:
  void clear_atracksplan();
  ::PB_TargetTrack* mutable_atracksplan(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PB_TargetTrack >*
      mutable_atracksplan();
  private:
  const ::PB_TargetTrack& _internal_atracksplan(int index) const;
  ::PB_TargetTrack* _internal_add_atracksplan();
  public:
  const ::PB_TargetTrack& atracksplan(int index) const;
  ::PB_TargetTrack* add_atracksplan();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PB_TargetTrack >&
      atracksplan() const;

  // .PB_PlanToHdmi tPlanToHdmi = 3;
  bool has_tplantohdmi() const;
  private:
  bool _internal_has_tplantohdmi() const;
  public:
  void clear_tplantohdmi();
  const ::PB_PlanToHdmi& tplantohdmi() const;
  ::PB_PlanToHdmi* release_tplantohdmi();
  ::PB_PlanToHdmi* mutable_tplantohdmi();
  void set_allocated_tplantohdmi(::PB_PlanToHdmi* tplantohdmi);
  private:
  const ::PB_PlanToHdmi& _internal_tplantohdmi() const;
  ::PB_PlanToHdmi* _internal_mutable_tplantohdmi();
  public:
  void unsafe_arena_set_allocated_tplantohdmi(
      ::PB_PlanToHdmi* tplantohdmi);
  ::PB_PlanToHdmi* unsafe_arena_release_tplantohdmi();

  // .PB_Location syncDr = 5;
  bool has_syncdr() const;
  private:
  bool _internal_has_syncdr() const;
  public:
  void clear_syncdr();
  const ::PB_Location& syncdr() const;
  ::PB_Location* release_syncdr();
  ::PB_Location* mutable_syncdr();
  void set_allocated_syncdr(::PB_Location* syncdr);
  private:
  const ::PB_Location& _internal_syncdr() const;
  ::PB_Location* _internal_mutable_syncdr();
  public:
  void unsafe_arena_set_allocated_syncdr(
      ::PB_Location* syncdr);
  ::PB_Location* unsafe_arena_release_syncdr();

  // uint64 lTimeMsec = 1;
  void clear_ltimemsec();
  ::PROTOBUF_NAMESPACE_ID::uint64 ltimemsec() const;
  void set_ltimemsec(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ltimemsec() const;
  void _internal_set_ltimemsec(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 validNum = 2;
  void clear_validnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 validnum() const;
  void set_validnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_validnum() const;
  void _internal_set_validnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PB_PlanTrackInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PB_TargetTrack > atracksplan_;
  ::PB_PlanToHdmi* tplantohdmi_;
  ::PB_Location* syncdr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ltimemsec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 validnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PB_Vector2D

// float x = 1;
inline void PB_Vector2D::clear_x() {
  x_ = 0;
}
inline float PB_Vector2D::_internal_x() const {
  return x_;
}
inline float PB_Vector2D::x() const {
  // @@protoc_insertion_point(field_get:PB_Vector2D.x)
  return _internal_x();
}
inline void PB_Vector2D::_internal_set_x(float value) {
  
  x_ = value;
}
inline void PB_Vector2D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:PB_Vector2D.x)
}

// float y = 2;
inline void PB_Vector2D::clear_y() {
  y_ = 0;
}
inline float PB_Vector2D::_internal_y() const {
  return y_;
}
inline float PB_Vector2D::y() const {
  // @@protoc_insertion_point(field_get:PB_Vector2D.y)
  return _internal_y();
}
inline void PB_Vector2D::_internal_set_y(float value) {
  
  y_ = value;
}
inline void PB_Vector2D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:PB_Vector2D.y)
}

// -------------------------------------------------------------------

// PB_Location

// float x = 1;
inline void PB_Location::clear_x() {
  x_ = 0;
}
inline float PB_Location::_internal_x() const {
  return x_;
}
inline float PB_Location::x() const {
  // @@protoc_insertion_point(field_get:PB_Location.x)
  return _internal_x();
}
inline void PB_Location::_internal_set_x(float value) {
  
  x_ = value;
}
inline void PB_Location::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:PB_Location.x)
}

// float y = 2;
inline void PB_Location::clear_y() {
  y_ = 0;
}
inline float PB_Location::_internal_y() const {
  return y_;
}
inline float PB_Location::y() const {
  // @@protoc_insertion_point(field_get:PB_Location.y)
  return _internal_y();
}
inline void PB_Location::_internal_set_y(float value) {
  
  y_ = value;
}
inline void PB_Location::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:PB_Location.y)
}

// float yaw = 3;
inline void PB_Location::clear_yaw() {
  yaw_ = 0;
}
inline float PB_Location::_internal_yaw() const {
  return yaw_;
}
inline float PB_Location::yaw() const {
  // @@protoc_insertion_point(field_get:PB_Location.yaw)
  return _internal_yaw();
}
inline void PB_Location::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void PB_Location::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:PB_Location.yaw)
}

// -------------------------------------------------------------------

// PB_TargetTrack

// .PB_Vector2D point = 1;
inline bool PB_TargetTrack::_internal_has_point() const {
  return this != internal_default_instance() && point_ != nullptr;
}
inline bool PB_TargetTrack::has_point() const {
  return _internal_has_point();
}
inline void PB_TargetTrack::clear_point() {
  if (GetArena() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
}
inline const ::PB_Vector2D& PB_TargetTrack::_internal_point() const {
  const ::PB_Vector2D* p = point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PB_Vector2D*>(
      &::_PB_Vector2D_default_instance_);
}
inline const ::PB_Vector2D& PB_TargetTrack::point() const {
  // @@protoc_insertion_point(field_get:PB_TargetTrack.point)
  return _internal_point();
}
inline void PB_TargetTrack::unsafe_arena_set_allocated_point(
    ::PB_Vector2D* point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_);
  }
  point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PB_TargetTrack.point)
}
inline ::PB_Vector2D* PB_TargetTrack::release_point() {
  auto temp = unsafe_arena_release_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PB_Vector2D* PB_TargetTrack::unsafe_arena_release_point() {
  // @@protoc_insertion_point(field_release:PB_TargetTrack.point)
  
  ::PB_Vector2D* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::PB_Vector2D* PB_TargetTrack::_internal_mutable_point() {
  
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::PB_Vector2D>(GetArena());
    point_ = p;
  }
  return point_;
}
inline ::PB_Vector2D* PB_TargetTrack::mutable_point() {
  // @@protoc_insertion_point(field_mutable:PB_TargetTrack.point)
  return _internal_mutable_point();
}
inline void PB_TargetTrack::set_allocated_point(::PB_Vector2D* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete point_;
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(point);
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:PB_TargetTrack.point)
}

// float yaw = 2;
inline void PB_TargetTrack::clear_yaw() {
  yaw_ = 0;
}
inline float PB_TargetTrack::_internal_yaw() const {
  return yaw_;
}
inline float PB_TargetTrack::yaw() const {
  // @@protoc_insertion_point(field_get:PB_TargetTrack.yaw)
  return _internal_yaw();
}
inline void PB_TargetTrack::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void PB_TargetTrack::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:PB_TargetTrack.yaw)
}

// float curvature = 3;
inline void PB_TargetTrack::clear_curvature() {
  curvature_ = 0;
}
inline float PB_TargetTrack::_internal_curvature() const {
  return curvature_;
}
inline float PB_TargetTrack::curvature() const {
  // @@protoc_insertion_point(field_get:PB_TargetTrack.curvature)
  return _internal_curvature();
}
inline void PB_TargetTrack::_internal_set_curvature(float value) {
  
  curvature_ = value;
}
inline void PB_TargetTrack::set_curvature(float value) {
  _internal_set_curvature(value);
  // @@protoc_insertion_point(field_set:PB_TargetTrack.curvature)
}

// float speed = 4;
inline void PB_TargetTrack::clear_speed() {
  speed_ = 0;
}
inline float PB_TargetTrack::_internal_speed() const {
  return speed_;
}
inline float PB_TargetTrack::speed() const {
  // @@protoc_insertion_point(field_get:PB_TargetTrack.speed)
  return _internal_speed();
}
inline void PB_TargetTrack::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void PB_TargetTrack::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:PB_TargetTrack.speed)
}

// int32 nDetectStates = 5;
inline void PB_TargetTrack::clear_ndetectstates() {
  ndetectstates_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PB_TargetTrack::_internal_ndetectstates() const {
  return ndetectstates_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PB_TargetTrack::ndetectstates() const {
  // @@protoc_insertion_point(field_get:PB_TargetTrack.nDetectStates)
  return _internal_ndetectstates();
}
inline void PB_TargetTrack::_internal_set_ndetectstates(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ndetectstates_ = value;
}
inline void PB_TargetTrack::set_ndetectstates(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ndetectstates(value);
  // @@protoc_insertion_point(field_set:PB_TargetTrack.nDetectStates)
}

// -------------------------------------------------------------------

// PB_PlanToHdmi

// uint32 uCmd = 1;
inline void PB_PlanToHdmi::clear_ucmd() {
  ucmd_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PB_PlanToHdmi::_internal_ucmd() const {
  return ucmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PB_PlanToHdmi::ucmd() const {
  // @@protoc_insertion_point(field_get:PB_PlanToHdmi.uCmd)
  return _internal_ucmd();
}
inline void PB_PlanToHdmi::_internal_set_ucmd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ucmd_ = value;
}
inline void PB_PlanToHdmi::set_ucmd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ucmd(value);
  // @@protoc_insertion_point(field_set:PB_PlanToHdmi.uCmd)
}

// uint32 uStatue = 2;
inline void PB_PlanToHdmi::clear_ustatue() {
  ustatue_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PB_PlanToHdmi::_internal_ustatue() const {
  return ustatue_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PB_PlanToHdmi::ustatue() const {
  // @@protoc_insertion_point(field_get:PB_PlanToHdmi.uStatue)
  return _internal_ustatue();
}
inline void PB_PlanToHdmi::_internal_set_ustatue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ustatue_ = value;
}
inline void PB_PlanToHdmi::set_ustatue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ustatue(value);
  // @@protoc_insertion_point(field_set:PB_PlanToHdmi.uStatue)
}

// uint32 uTotalStep = 3;
inline void PB_PlanToHdmi::clear_utotalstep() {
  utotalstep_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PB_PlanToHdmi::_internal_utotalstep() const {
  return utotalstep_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PB_PlanToHdmi::utotalstep() const {
  // @@protoc_insertion_point(field_get:PB_PlanToHdmi.uTotalStep)
  return _internal_utotalstep();
}
inline void PB_PlanToHdmi::_internal_set_utotalstep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utotalstep_ = value;
}
inline void PB_PlanToHdmi::set_utotalstep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_utotalstep(value);
  // @@protoc_insertion_point(field_set:PB_PlanToHdmi.uTotalStep)
}

// uint32 uCurrentStep = 4;
inline void PB_PlanToHdmi::clear_ucurrentstep() {
  ucurrentstep_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PB_PlanToHdmi::_internal_ucurrentstep() const {
  return ucurrentstep_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PB_PlanToHdmi::ucurrentstep() const {
  // @@protoc_insertion_point(field_get:PB_PlanToHdmi.uCurrentStep)
  return _internal_ucurrentstep();
}
inline void PB_PlanToHdmi::_internal_set_ucurrentstep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ucurrentstep_ = value;
}
inline void PB_PlanToHdmi::set_ucurrentstep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ucurrentstep(value);
  // @@protoc_insertion_point(field_set:PB_PlanToHdmi.uCurrentStep)
}

// uint32 uDisStep = 5;
inline void PB_PlanToHdmi::clear_udisstep() {
  udisstep_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PB_PlanToHdmi::_internal_udisstep() const {
  return udisstep_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PB_PlanToHdmi::udisstep() const {
  // @@protoc_insertion_point(field_get:PB_PlanToHdmi.uDisStep)
  return _internal_udisstep();
}
inline void PB_PlanToHdmi::_internal_set_udisstep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  udisstep_ = value;
}
inline void PB_PlanToHdmi::set_udisstep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_udisstep(value);
  // @@protoc_insertion_point(field_set:PB_PlanToHdmi.uDisStep)
}

// uint32 uPlanOutDetectSts = 6;
inline void PB_PlanToHdmi::clear_uplanoutdetectsts() {
  uplanoutdetectsts_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PB_PlanToHdmi::_internal_uplanoutdetectsts() const {
  return uplanoutdetectsts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PB_PlanToHdmi::uplanoutdetectsts() const {
  // @@protoc_insertion_point(field_get:PB_PlanToHdmi.uPlanOutDetectSts)
  return _internal_uplanoutdetectsts();
}
inline void PB_PlanToHdmi::_internal_set_uplanoutdetectsts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uplanoutdetectsts_ = value;
}
inline void PB_PlanToHdmi::set_uplanoutdetectsts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uplanoutdetectsts(value);
  // @@protoc_insertion_point(field_set:PB_PlanToHdmi.uPlanOutDetectSts)
}

// repeated float px = 7;
inline int PB_PlanToHdmi::_internal_px_size() const {
  return px_.size();
}
inline int PB_PlanToHdmi::px_size() const {
  return _internal_px_size();
}
inline void PB_PlanToHdmi::clear_px() {
  px_.Clear();
}
inline float PB_PlanToHdmi::_internal_px(int index) const {
  return px_.Get(index);
}
inline float PB_PlanToHdmi::px(int index) const {
  // @@protoc_insertion_point(field_get:PB_PlanToHdmi.px)
  return _internal_px(index);
}
inline void PB_PlanToHdmi::set_px(int index, float value) {
  px_.Set(index, value);
  // @@protoc_insertion_point(field_set:PB_PlanToHdmi.px)
}
inline void PB_PlanToHdmi::_internal_add_px(float value) {
  px_.Add(value);
}
inline void PB_PlanToHdmi::add_px(float value) {
  _internal_add_px(value);
  // @@protoc_insertion_point(field_add:PB_PlanToHdmi.px)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PB_PlanToHdmi::_internal_px() const {
  return px_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PB_PlanToHdmi::px() const {
  // @@protoc_insertion_point(field_list:PB_PlanToHdmi.px)
  return _internal_px();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PB_PlanToHdmi::_internal_mutable_px() {
  return &px_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PB_PlanToHdmi::mutable_px() {
  // @@protoc_insertion_point(field_mutable_list:PB_PlanToHdmi.px)
  return _internal_mutable_px();
}

// repeated float py = 8;
inline int PB_PlanToHdmi::_internal_py_size() const {
  return py_.size();
}
inline int PB_PlanToHdmi::py_size() const {
  return _internal_py_size();
}
inline void PB_PlanToHdmi::clear_py() {
  py_.Clear();
}
inline float PB_PlanToHdmi::_internal_py(int index) const {
  return py_.Get(index);
}
inline float PB_PlanToHdmi::py(int index) const {
  // @@protoc_insertion_point(field_get:PB_PlanToHdmi.py)
  return _internal_py(index);
}
inline void PB_PlanToHdmi::set_py(int index, float value) {
  py_.Set(index, value);
  // @@protoc_insertion_point(field_set:PB_PlanToHdmi.py)
}
inline void PB_PlanToHdmi::_internal_add_py(float value) {
  py_.Add(value);
}
inline void PB_PlanToHdmi::add_py(float value) {
  _internal_add_py(value);
  // @@protoc_insertion_point(field_add:PB_PlanToHdmi.py)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PB_PlanToHdmi::_internal_py() const {
  return py_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PB_PlanToHdmi::py() const {
  // @@protoc_insertion_point(field_list:PB_PlanToHdmi.py)
  return _internal_py();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PB_PlanToHdmi::_internal_mutable_py() {
  return &py_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PB_PlanToHdmi::mutable_py() {
  // @@protoc_insertion_point(field_mutable_list:PB_PlanToHdmi.py)
  return _internal_mutable_py();
}

// -------------------------------------------------------------------

// PB_PlanTrackInfo

// uint64 lTimeMsec = 1;
inline void PB_PlanTrackInfo::clear_ltimemsec() {
  ltimemsec_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PB_PlanTrackInfo::_internal_ltimemsec() const {
  return ltimemsec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PB_PlanTrackInfo::ltimemsec() const {
  // @@protoc_insertion_point(field_get:PB_PlanTrackInfo.lTimeMsec)
  return _internal_ltimemsec();
}
inline void PB_PlanTrackInfo::_internal_set_ltimemsec(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ltimemsec_ = value;
}
inline void PB_PlanTrackInfo::set_ltimemsec(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ltimemsec(value);
  // @@protoc_insertion_point(field_set:PB_PlanTrackInfo.lTimeMsec)
}

// uint32 validNum = 2;
inline void PB_PlanTrackInfo::clear_validnum() {
  validnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PB_PlanTrackInfo::_internal_validnum() const {
  return validnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PB_PlanTrackInfo::validnum() const {
  // @@protoc_insertion_point(field_get:PB_PlanTrackInfo.validNum)
  return _internal_validnum();
}
inline void PB_PlanTrackInfo::_internal_set_validnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  validnum_ = value;
}
inline void PB_PlanTrackInfo::set_validnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_validnum(value);
  // @@protoc_insertion_point(field_set:PB_PlanTrackInfo.validNum)
}

// .PB_PlanToHdmi tPlanToHdmi = 3;
inline bool PB_PlanTrackInfo::_internal_has_tplantohdmi() const {
  return this != internal_default_instance() && tplantohdmi_ != nullptr;
}
inline bool PB_PlanTrackInfo::has_tplantohdmi() const {
  return _internal_has_tplantohdmi();
}
inline void PB_PlanTrackInfo::clear_tplantohdmi() {
  if (GetArena() == nullptr && tplantohdmi_ != nullptr) {
    delete tplantohdmi_;
  }
  tplantohdmi_ = nullptr;
}
inline const ::PB_PlanToHdmi& PB_PlanTrackInfo::_internal_tplantohdmi() const {
  const ::PB_PlanToHdmi* p = tplantohdmi_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PB_PlanToHdmi*>(
      &::_PB_PlanToHdmi_default_instance_);
}
inline const ::PB_PlanToHdmi& PB_PlanTrackInfo::tplantohdmi() const {
  // @@protoc_insertion_point(field_get:PB_PlanTrackInfo.tPlanToHdmi)
  return _internal_tplantohdmi();
}
inline void PB_PlanTrackInfo::unsafe_arena_set_allocated_tplantohdmi(
    ::PB_PlanToHdmi* tplantohdmi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tplantohdmi_);
  }
  tplantohdmi_ = tplantohdmi;
  if (tplantohdmi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PB_PlanTrackInfo.tPlanToHdmi)
}
inline ::PB_PlanToHdmi* PB_PlanTrackInfo::release_tplantohdmi() {
  auto temp = unsafe_arena_release_tplantohdmi();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PB_PlanToHdmi* PB_PlanTrackInfo::unsafe_arena_release_tplantohdmi() {
  // @@protoc_insertion_point(field_release:PB_PlanTrackInfo.tPlanToHdmi)
  
  ::PB_PlanToHdmi* temp = tplantohdmi_;
  tplantohdmi_ = nullptr;
  return temp;
}
inline ::PB_PlanToHdmi* PB_PlanTrackInfo::_internal_mutable_tplantohdmi() {
  
  if (tplantohdmi_ == nullptr) {
    auto* p = CreateMaybeMessage<::PB_PlanToHdmi>(GetArena());
    tplantohdmi_ = p;
  }
  return tplantohdmi_;
}
inline ::PB_PlanToHdmi* PB_PlanTrackInfo::mutable_tplantohdmi() {
  // @@protoc_insertion_point(field_mutable:PB_PlanTrackInfo.tPlanToHdmi)
  return _internal_mutable_tplantohdmi();
}
inline void PB_PlanTrackInfo::set_allocated_tplantohdmi(::PB_PlanToHdmi* tplantohdmi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tplantohdmi_;
  }
  if (tplantohdmi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tplantohdmi);
    if (message_arena != submessage_arena) {
      tplantohdmi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tplantohdmi, submessage_arena);
    }
    
  } else {
    
  }
  tplantohdmi_ = tplantohdmi;
  // @@protoc_insertion_point(field_set_allocated:PB_PlanTrackInfo.tPlanToHdmi)
}

// repeated .PB_TargetTrack aTracksPlan = 4;
inline int PB_PlanTrackInfo::_internal_atracksplan_size() const {
  return atracksplan_.size();
}
inline int PB_PlanTrackInfo::atracksplan_size() const {
  return _internal_atracksplan_size();
}
inline void PB_PlanTrackInfo::clear_atracksplan() {
  atracksplan_.Clear();
}
inline ::PB_TargetTrack* PB_PlanTrackInfo::mutable_atracksplan(int index) {
  // @@protoc_insertion_point(field_mutable:PB_PlanTrackInfo.aTracksPlan)
  return atracksplan_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PB_TargetTrack >*
PB_PlanTrackInfo::mutable_atracksplan() {
  // @@protoc_insertion_point(field_mutable_list:PB_PlanTrackInfo.aTracksPlan)
  return &atracksplan_;
}
inline const ::PB_TargetTrack& PB_PlanTrackInfo::_internal_atracksplan(int index) const {
  return atracksplan_.Get(index);
}
inline const ::PB_TargetTrack& PB_PlanTrackInfo::atracksplan(int index) const {
  // @@protoc_insertion_point(field_get:PB_PlanTrackInfo.aTracksPlan)
  return _internal_atracksplan(index);
}
inline ::PB_TargetTrack* PB_PlanTrackInfo::_internal_add_atracksplan() {
  return atracksplan_.Add();
}
inline ::PB_TargetTrack* PB_PlanTrackInfo::add_atracksplan() {
  // @@protoc_insertion_point(field_add:PB_PlanTrackInfo.aTracksPlan)
  return _internal_add_atracksplan();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PB_TargetTrack >&
PB_PlanTrackInfo::atracksplan() const {
  // @@protoc_insertion_point(field_list:PB_PlanTrackInfo.aTracksPlan)
  return atracksplan_;
}

// .PB_Location syncDr = 5;
inline bool PB_PlanTrackInfo::_internal_has_syncdr() const {
  return this != internal_default_instance() && syncdr_ != nullptr;
}
inline bool PB_PlanTrackInfo::has_syncdr() const {
  return _internal_has_syncdr();
}
inline void PB_PlanTrackInfo::clear_syncdr() {
  if (GetArena() == nullptr && syncdr_ != nullptr) {
    delete syncdr_;
  }
  syncdr_ = nullptr;
}
inline const ::PB_Location& PB_PlanTrackInfo::_internal_syncdr() const {
  const ::PB_Location* p = syncdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PB_Location*>(
      &::_PB_Location_default_instance_);
}
inline const ::PB_Location& PB_PlanTrackInfo::syncdr() const {
  // @@protoc_insertion_point(field_get:PB_PlanTrackInfo.syncDr)
  return _internal_syncdr();
}
inline void PB_PlanTrackInfo::unsafe_arena_set_allocated_syncdr(
    ::PB_Location* syncdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(syncdr_);
  }
  syncdr_ = syncdr;
  if (syncdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PB_PlanTrackInfo.syncDr)
}
inline ::PB_Location* PB_PlanTrackInfo::release_syncdr() {
  auto temp = unsafe_arena_release_syncdr();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PB_Location* PB_PlanTrackInfo::unsafe_arena_release_syncdr() {
  // @@protoc_insertion_point(field_release:PB_PlanTrackInfo.syncDr)
  
  ::PB_Location* temp = syncdr_;
  syncdr_ = nullptr;
  return temp;
}
inline ::PB_Location* PB_PlanTrackInfo::_internal_mutable_syncdr() {
  
  if (syncdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::PB_Location>(GetArena());
    syncdr_ = p;
  }
  return syncdr_;
}
inline ::PB_Location* PB_PlanTrackInfo::mutable_syncdr() {
  // @@protoc_insertion_point(field_mutable:PB_PlanTrackInfo.syncDr)
  return _internal_mutable_syncdr();
}
inline void PB_PlanTrackInfo::set_allocated_syncdr(::PB_Location* syncdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete syncdr_;
  }
  if (syncdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(syncdr);
    if (message_arena != submessage_arena) {
      syncdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, syncdr, submessage_arena);
    }
    
  } else {
    
  }
  syncdr_ = syncdr;
  // @@protoc_insertion_point(field_set_allocated:PB_PlanTrackInfo.syncDr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto
