// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_3d/mv_slot.proto

#include "hmi_3d/mv_slot.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_hmi_5f3d_2fmv_5fslot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PB_PrkgSlot_hmi_5f3d_2fmv_5fslot_2eproto;
class PB_PrkgSlotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PB_PrkgSlot> _instance;
} _PB_PrkgSlot_default_instance_;
class PB_SlotInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PB_SlotInfo> _instance;
} _PB_SlotInfo_default_instance_;
static void InitDefaultsscc_info_PB_PrkgSlot_hmi_5f3d_2fmv_5fslot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PB_PrkgSlot_default_instance_;
    new (ptr) ::PB_PrkgSlot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PB_PrkgSlot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PB_PrkgSlot_hmi_5f3d_2fmv_5fslot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PB_PrkgSlot_hmi_5f3d_2fmv_5fslot_2eproto}, {}};

static void InitDefaultsscc_info_PB_SlotInfo_hmi_5f3d_2fmv_5fslot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PB_SlotInfo_default_instance_;
    new (ptr) ::PB_SlotInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PB_SlotInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PB_SlotInfo_hmi_5f3d_2fmv_5fslot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PB_SlotInfo_hmi_5f3d_2fmv_5fslot_2eproto}, {
      &scc_info_PB_PrkgSlot_hmi_5f3d_2fmv_5fslot_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hmi_5f3d_2fmv_5fslot_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_hmi_5f3d_2fmv_5fslot_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hmi_5f3d_2fmv_5fslot_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_hmi_5f3d_2fmv_5fslot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PB_PrkgSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PB_PrkgSlot, apa_prkgslot_sts_),
  PROTOBUF_FIELD_OFFSET(::PB_PrkgSlot, apa_slotacoorx_),
  PROTOBUF_FIELD_OFFSET(::PB_PrkgSlot, apa_slotacoory_),
  PROTOBUF_FIELD_OFFSET(::PB_PrkgSlot, apa_slotbcoorx_),
  PROTOBUF_FIELD_OFFSET(::PB_PrkgSlot, apa_slotbcoory_),
  PROTOBUF_FIELD_OFFSET(::PB_PrkgSlot, apa_slotccoorx_),
  PROTOBUF_FIELD_OFFSET(::PB_PrkgSlot, apa_slotccoory_),
  PROTOBUF_FIELD_OFFSET(::PB_PrkgSlot, apa_slotdcoorx_),
  PROTOBUF_FIELD_OFFSET(::PB_PrkgSlot, apa_slotdcoory_),
  PROTOBUF_FIELD_OFFSET(::PB_PrkgSlot, bias_valid_direction_),
  PROTOBUF_FIELD_OFFSET(::PB_PrkgSlot, apa_prkgslotlimit_sts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PB_SlotInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PB_SlotInfo, timemsec_),
  PROTOBUF_FIELD_OFFSET(::PB_SlotInfo, prkgslot_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PB_PrkgSlot)},
  { 16, -1, sizeof(::PB_SlotInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PB_PrkgSlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PB_SlotInfo_default_instance_),
};

const char descriptor_table_protodef_hmi_5f3d_2fmv_5fslot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024hmi_3d/mv_slot.proto\"\244\002\n\013PB_PrkgSlot\022\030"
  "\n\020APA_PrkgSlot_Sts\030\001 \001(\r\022\026\n\016APA_SlotACoo"
  "rX\030\002 \001(\002\022\026\n\016APA_SlotACoorY\030\003 \001(\002\022\026\n\016APA_"
  "SlotBCoorX\030\004 \001(\002\022\026\n\016APA_SlotBCoorY\030\005 \001(\002"
  "\022\026\n\016APA_SlotCCoorX\030\006 \001(\002\022\026\n\016APA_SlotCCoo"
  "rY\030\007 \001(\002\022\026\n\016APA_SlotDCoorX\030\010 \001(\002\022\026\n\016APA_"
  "SlotDCoorY\030\t \001(\002\022\034\n\024bias_valid_direction"
  "\030\n \001(\r\022\035\n\025APA_PrkgSlotLimit_Sts\030\013 \001(\r\"\?\n"
  "\013PB_SlotInfo\022\020\n\010TimeMsec\030\001 \001(\004\022\036\n\010PrkgSl"
  "ot\030\002 \001(\0132\014.PB_PrkgSlotb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_hmi_5f3d_2fmv_5fslot_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_hmi_5f3d_2fmv_5fslot_2eproto_sccs[2] = {
  &scc_info_PB_PrkgSlot_hmi_5f3d_2fmv_5fslot_2eproto.base,
  &scc_info_PB_SlotInfo_hmi_5f3d_2fmv_5fslot_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hmi_5f3d_2fmv_5fslot_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hmi_5f3d_2fmv_5fslot_2eproto = {
  false, false, descriptor_table_protodef_hmi_5f3d_2fmv_5fslot_2eproto, "hmi_3d/mv_slot.proto", 390,
  &descriptor_table_hmi_5f3d_2fmv_5fslot_2eproto_once, descriptor_table_hmi_5f3d_2fmv_5fslot_2eproto_sccs, descriptor_table_hmi_5f3d_2fmv_5fslot_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_hmi_5f3d_2fmv_5fslot_2eproto::offsets,
  file_level_metadata_hmi_5f3d_2fmv_5fslot_2eproto, 2, file_level_enum_descriptors_hmi_5f3d_2fmv_5fslot_2eproto, file_level_service_descriptors_hmi_5f3d_2fmv_5fslot_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_hmi_5f3d_2fmv_5fslot_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_hmi_5f3d_2fmv_5fslot_2eproto)), true);

// ===================================================================

void PB_PrkgSlot::InitAsDefaultInstance() {
}
class PB_PrkgSlot::_Internal {
 public:
};

PB_PrkgSlot::PB_PrkgSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PB_PrkgSlot)
}
PB_PrkgSlot::PB_PrkgSlot(const PB_PrkgSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&apa_prkgslot_sts_, &from.apa_prkgslot_sts_,
    static_cast<size_t>(reinterpret_cast<char*>(&apa_prkgslotlimit_sts_) -
    reinterpret_cast<char*>(&apa_prkgslot_sts_)) + sizeof(apa_prkgslotlimit_sts_));
  // @@protoc_insertion_point(copy_constructor:PB_PrkgSlot)
}

void PB_PrkgSlot::SharedCtor() {
  ::memset(&apa_prkgslot_sts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&apa_prkgslotlimit_sts_) -
      reinterpret_cast<char*>(&apa_prkgslot_sts_)) + sizeof(apa_prkgslotlimit_sts_));
}

PB_PrkgSlot::~PB_PrkgSlot() {
  // @@protoc_insertion_point(destructor:PB_PrkgSlot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PB_PrkgSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PB_PrkgSlot::ArenaDtor(void* object) {
  PB_PrkgSlot* _this = reinterpret_cast< PB_PrkgSlot* >(object);
  (void)_this;
}
void PB_PrkgSlot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_PrkgSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PB_PrkgSlot& PB_PrkgSlot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PB_PrkgSlot_hmi_5f3d_2fmv_5fslot_2eproto.base);
  return *internal_default_instance();
}


void PB_PrkgSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:PB_PrkgSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&apa_prkgslot_sts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&apa_prkgslotlimit_sts_) -
      reinterpret_cast<char*>(&apa_prkgslot_sts_)) + sizeof(apa_prkgslotlimit_sts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_PrkgSlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 APA_PrkgSlot_Sts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          apa_prkgslot_sts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float APA_SlotACoorX = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          apa_slotacoorx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float APA_SlotACoorY = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          apa_slotacoory_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float APA_SlotBCoorX = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          apa_slotbcoorx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float APA_SlotBCoorY = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          apa_slotbcoory_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float APA_SlotCCoorX = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          apa_slotccoorx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float APA_SlotCCoorY = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          apa_slotccoory_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float APA_SlotDCoorX = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          apa_slotdcoorx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float APA_SlotDCoorY = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          apa_slotdcoory_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 bias_valid_direction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          bias_valid_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 APA_PrkgSlotLimit_Sts = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          apa_prkgslotlimit_sts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PB_PrkgSlot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_PrkgSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 APA_PrkgSlot_Sts = 1;
  if (this->apa_prkgslot_sts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_apa_prkgslot_sts(), target);
  }

  // float APA_SlotACoorX = 2;
  if (!(this->apa_slotacoorx() <= 0 && this->apa_slotacoorx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_apa_slotacoorx(), target);
  }

  // float APA_SlotACoorY = 3;
  if (!(this->apa_slotacoory() <= 0 && this->apa_slotacoory() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_apa_slotacoory(), target);
  }

  // float APA_SlotBCoorX = 4;
  if (!(this->apa_slotbcoorx() <= 0 && this->apa_slotbcoorx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_apa_slotbcoorx(), target);
  }

  // float APA_SlotBCoorY = 5;
  if (!(this->apa_slotbcoory() <= 0 && this->apa_slotbcoory() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_apa_slotbcoory(), target);
  }

  // float APA_SlotCCoorX = 6;
  if (!(this->apa_slotccoorx() <= 0 && this->apa_slotccoorx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_apa_slotccoorx(), target);
  }

  // float APA_SlotCCoorY = 7;
  if (!(this->apa_slotccoory() <= 0 && this->apa_slotccoory() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_apa_slotccoory(), target);
  }

  // float APA_SlotDCoorX = 8;
  if (!(this->apa_slotdcoorx() <= 0 && this->apa_slotdcoorx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_apa_slotdcoorx(), target);
  }

  // float APA_SlotDCoorY = 9;
  if (!(this->apa_slotdcoory() <= 0 && this->apa_slotdcoory() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_apa_slotdcoory(), target);
  }

  // uint32 bias_valid_direction = 10;
  if (this->bias_valid_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_bias_valid_direction(), target);
  }

  // uint32 APA_PrkgSlotLimit_Sts = 11;
  if (this->apa_prkgslotlimit_sts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_apa_prkgslotlimit_sts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_PrkgSlot)
  return target;
}

size_t PB_PrkgSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB_PrkgSlot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 APA_PrkgSlot_Sts = 1;
  if (this->apa_prkgslot_sts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_apa_prkgslot_sts());
  }

  // float APA_SlotACoorX = 2;
  if (!(this->apa_slotacoorx() <= 0 && this->apa_slotacoorx() >= 0)) {
    total_size += 1 + 4;
  }

  // float APA_SlotACoorY = 3;
  if (!(this->apa_slotacoory() <= 0 && this->apa_slotacoory() >= 0)) {
    total_size += 1 + 4;
  }

  // float APA_SlotBCoorX = 4;
  if (!(this->apa_slotbcoorx() <= 0 && this->apa_slotbcoorx() >= 0)) {
    total_size += 1 + 4;
  }

  // float APA_SlotBCoorY = 5;
  if (!(this->apa_slotbcoory() <= 0 && this->apa_slotbcoory() >= 0)) {
    total_size += 1 + 4;
  }

  // float APA_SlotCCoorX = 6;
  if (!(this->apa_slotccoorx() <= 0 && this->apa_slotccoorx() >= 0)) {
    total_size += 1 + 4;
  }

  // float APA_SlotCCoorY = 7;
  if (!(this->apa_slotccoory() <= 0 && this->apa_slotccoory() >= 0)) {
    total_size += 1 + 4;
  }

  // float APA_SlotDCoorX = 8;
  if (!(this->apa_slotdcoorx() <= 0 && this->apa_slotdcoorx() >= 0)) {
    total_size += 1 + 4;
  }

  // float APA_SlotDCoorY = 9;
  if (!(this->apa_slotdcoory() <= 0 && this->apa_slotdcoory() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 bias_valid_direction = 10;
  if (this->bias_valid_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bias_valid_direction());
  }

  // uint32 APA_PrkgSlotLimit_Sts = 11;
  if (this->apa_prkgslotlimit_sts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_apa_prkgslotlimit_sts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PB_PrkgSlot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PB_PrkgSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_PrkgSlot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PB_PrkgSlot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PB_PrkgSlot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PB_PrkgSlot)
    MergeFrom(*source);
  }
}

void PB_PrkgSlot::MergeFrom(const PB_PrkgSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB_PrkgSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.apa_prkgslot_sts() != 0) {
    _internal_set_apa_prkgslot_sts(from._internal_apa_prkgslot_sts());
  }
  if (!(from.apa_slotacoorx() <= 0 && from.apa_slotacoorx() >= 0)) {
    _internal_set_apa_slotacoorx(from._internal_apa_slotacoorx());
  }
  if (!(from.apa_slotacoory() <= 0 && from.apa_slotacoory() >= 0)) {
    _internal_set_apa_slotacoory(from._internal_apa_slotacoory());
  }
  if (!(from.apa_slotbcoorx() <= 0 && from.apa_slotbcoorx() >= 0)) {
    _internal_set_apa_slotbcoorx(from._internal_apa_slotbcoorx());
  }
  if (!(from.apa_slotbcoory() <= 0 && from.apa_slotbcoory() >= 0)) {
    _internal_set_apa_slotbcoory(from._internal_apa_slotbcoory());
  }
  if (!(from.apa_slotccoorx() <= 0 && from.apa_slotccoorx() >= 0)) {
    _internal_set_apa_slotccoorx(from._internal_apa_slotccoorx());
  }
  if (!(from.apa_slotccoory() <= 0 && from.apa_slotccoory() >= 0)) {
    _internal_set_apa_slotccoory(from._internal_apa_slotccoory());
  }
  if (!(from.apa_slotdcoorx() <= 0 && from.apa_slotdcoorx() >= 0)) {
    _internal_set_apa_slotdcoorx(from._internal_apa_slotdcoorx());
  }
  if (!(from.apa_slotdcoory() <= 0 && from.apa_slotdcoory() >= 0)) {
    _internal_set_apa_slotdcoory(from._internal_apa_slotdcoory());
  }
  if (from.bias_valid_direction() != 0) {
    _internal_set_bias_valid_direction(from._internal_bias_valid_direction());
  }
  if (from.apa_prkgslotlimit_sts() != 0) {
    _internal_set_apa_prkgslotlimit_sts(from._internal_apa_prkgslotlimit_sts());
  }
}

void PB_PrkgSlot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PB_PrkgSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_PrkgSlot::CopyFrom(const PB_PrkgSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB_PrkgSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_PrkgSlot::IsInitialized() const {
  return true;
}

void PB_PrkgSlot::InternalSwap(PB_PrkgSlot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_PrkgSlot, apa_prkgslotlimit_sts_)
      + sizeof(PB_PrkgSlot::apa_prkgslotlimit_sts_)
      - PROTOBUF_FIELD_OFFSET(PB_PrkgSlot, apa_prkgslot_sts_)>(
          reinterpret_cast<char*>(&apa_prkgslot_sts_),
          reinterpret_cast<char*>(&other->apa_prkgslot_sts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_PrkgSlot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PB_SlotInfo::InitAsDefaultInstance() {
  ::_PB_SlotInfo_default_instance_._instance.get_mutable()->prkgslot_ = const_cast< ::PB_PrkgSlot*>(
      ::PB_PrkgSlot::internal_default_instance());
}
class PB_SlotInfo::_Internal {
 public:
  static const ::PB_PrkgSlot& prkgslot(const PB_SlotInfo* msg);
};

const ::PB_PrkgSlot&
PB_SlotInfo::_Internal::prkgslot(const PB_SlotInfo* msg) {
  return *msg->prkgslot_;
}
PB_SlotInfo::PB_SlotInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PB_SlotInfo)
}
PB_SlotInfo::PB_SlotInfo(const PB_SlotInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prkgslot()) {
    prkgslot_ = new ::PB_PrkgSlot(*from.prkgslot_);
  } else {
    prkgslot_ = nullptr;
  }
  timemsec_ = from.timemsec_;
  // @@protoc_insertion_point(copy_constructor:PB_SlotInfo)
}

void PB_SlotInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PB_SlotInfo_hmi_5f3d_2fmv_5fslot_2eproto.base);
  ::memset(&prkgslot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timemsec_) -
      reinterpret_cast<char*>(&prkgslot_)) + sizeof(timemsec_));
}

PB_SlotInfo::~PB_SlotInfo() {
  // @@protoc_insertion_point(destructor:PB_SlotInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PB_SlotInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete prkgslot_;
}

void PB_SlotInfo::ArenaDtor(void* object) {
  PB_SlotInfo* _this = reinterpret_cast< PB_SlotInfo* >(object);
  (void)_this;
}
void PB_SlotInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_SlotInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PB_SlotInfo& PB_SlotInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PB_SlotInfo_hmi_5f3d_2fmv_5fslot_2eproto.base);
  return *internal_default_instance();
}


void PB_SlotInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PB_SlotInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && prkgslot_ != nullptr) {
    delete prkgslot_;
  }
  prkgslot_ = nullptr;
  timemsec_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_SlotInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 TimeMsec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timemsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PB_PrkgSlot PrkgSlot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prkgslot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PB_SlotInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_SlotInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 TimeMsec = 1;
  if (this->timemsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timemsec(), target);
  }

  // .PB_PrkgSlot PrkgSlot = 2;
  if (this->has_prkgslot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::prkgslot(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_SlotInfo)
  return target;
}

size_t PB_SlotInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB_SlotInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PB_PrkgSlot PrkgSlot = 2;
  if (this->has_prkgslot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prkgslot_);
  }

  // uint64 TimeMsec = 1;
  if (this->timemsec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timemsec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PB_SlotInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PB_SlotInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_SlotInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PB_SlotInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PB_SlotInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PB_SlotInfo)
    MergeFrom(*source);
  }
}

void PB_SlotInfo::MergeFrom(const PB_SlotInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB_SlotInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_prkgslot()) {
    _internal_mutable_prkgslot()->::PB_PrkgSlot::MergeFrom(from._internal_prkgslot());
  }
  if (from.timemsec() != 0) {
    _internal_set_timemsec(from._internal_timemsec());
  }
}

void PB_SlotInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PB_SlotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_SlotInfo::CopyFrom(const PB_SlotInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB_SlotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_SlotInfo::IsInitialized() const {
  return true;
}

void PB_SlotInfo::InternalSwap(PB_SlotInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_SlotInfo, timemsec_)
      + sizeof(PB_SlotInfo::timemsec_)
      - PROTOBUF_FIELD_OFFSET(PB_SlotInfo, prkgslot_)>(
          reinterpret_cast<char*>(&prkgslot_),
          reinterpret_cast<char*>(&other->prkgslot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_SlotInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PB_PrkgSlot* Arena::CreateMaybeMessage< ::PB_PrkgSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PB_PrkgSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::PB_SlotInfo* Arena::CreateMaybeMessage< ::PB_SlotInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PB_SlotInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
