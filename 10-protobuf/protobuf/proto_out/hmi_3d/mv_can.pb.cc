// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_3d/mv_can.proto

#include "hmi_3d/mv_can.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class PB_CanDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PB_CanData> _instance;
} _PB_CanData_default_instance_;
static void InitDefaultsscc_info_PB_CanData_hmi_5f3d_2fmv_5fcan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PB_CanData_default_instance_;
    new (ptr) ::PB_CanData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PB_CanData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PB_CanData_hmi_5f3d_2fmv_5fcan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PB_CanData_hmi_5f3d_2fmv_5fcan_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hmi_5f3d_2fmv_5fcan_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_hmi_5f3d_2fmv_5fcan_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hmi_5f3d_2fmv_5fcan_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_hmi_5f3d_2fmv_5fcan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PB_CanData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nstructlen_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nframeid_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, ltimemsec_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nbrake_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nllight_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nrlight_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, fvelocity_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nbrakevalue_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, faccelpedalposition_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, flongiaccel_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, flateralaccel_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, fyawrate_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, ntransmissionstatus_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, falpha_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, fsteeingwheelangle_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, fsteeingwheelrate_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nparkbrake_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nwipewasherswitch_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nhazardlightswitch_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nhighlowbeamswitch_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nflwheelspeedrc_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nfrwheelspeedrc_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nrlwheelspeedrc_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nrrwheelspeedrc_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, ndoorstat_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, npulsedirection_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, fwheelspd_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, x_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, y_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, yaw_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nbonnetsts_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, ntrunksts_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nsrfsts_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, bcm_keyst_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, acu_svm_button_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, acu_vr_svm_switch_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, hazardlampst_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, externaltemperature_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, externaltemperaturevalidity_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, ltimemsecwheelpulse_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, ltimemsecwheelspeed_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, ltimemsecsteerangle_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nflwheelspeedrc_vld_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nfrwheelspeedrc_vld_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nrlwheelspeedrc_vld_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nrrwheelspeedrc_vld_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nsteeingwheelratevld_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nbrakevld_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nwhlspdvld_lf_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, naccelpedalpositionvld_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, yrs_lgtsnsrsts_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, yrs_latsnsrsts_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, yrs_yawratesnsrsts_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nsteeingwheelanglevld_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, nrvslampoutpcmd_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, ltimesec_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, trailhook_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, externalhumidity_),
  PROTOBUF_FIELD_OFFSET(::PB_CanData, externalhumidityvalidity_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PB_CanData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PB_CanData_default_instance_),
};

const char descriptor_table_protodef_hmi_5f3d_2fmv_5fcan_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023hmi_3d/mv_can.proto\"\371\n\n\nPB_CanData\022\022\n\n"
  "nStructLen\030\001 \001(\r\022\020\n\010nFrameId\030\002 \001(\r\022\021\n\tlT"
  "imeMsec\030\003 \001(\004\022\016\n\006nBrake\030\004 \001(\005\022\017\n\007nLLight"
  "\030\005 \001(\005\022\017\n\007nRLight\030\006 \001(\005\022\021\n\tfVelocity\030\007 \001"
  "(\002\022\023\n\013nBrakeValue\030\010 \001(\005\022\033\n\023fAccelPedalPo"
  "sition\030\t \001(\002\022\023\n\013fLongiAccel\030\n \001(\002\022\025\n\rfLa"
  "teralAccel\030\013 \001(\002\022\020\n\010fYawRate\030\014 \001(\002\022\033\n\023nT"
  "ransmissionStatus\030\r \001(\005\022\016\n\006fAlpha\030\016 \001(\002\022"
  "\032\n\022fSteeingWheelAngle\030\017 \001(\002\022\031\n\021fSteeingW"
  "heelRate\030\020 \001(\002\022\022\n\nnParkBrake\030\021 \001(\005\022\031\n\021nW"
  "ipeWasherSwitch\030\022 \001(\005\022\032\n\022nHazardLightSwi"
  "tch\030\023 \001(\005\022\032\n\022nHighLowBeamSwitch\030\024 \001(\005\022\027\n"
  "\017nFLWheelSpeedRC\030\025 \001(\r\022\027\n\017nFRWheelSpeedR"
  "C\030\026 \001(\r\022\027\n\017nRLWheelSpeedRC\030\027 \001(\r\022\027\n\017nRRW"
  "heelSpeedRC\030\030 \001(\r\022\021\n\tnDoorStat\030\031 \003(\r\022\027\n\017"
  "nPulseDirection\030\032 \001(\005\022\021\n\tfWheelSpd\030\033 \001(\002"
  "\022\t\n\001x\030\034 \001(\002\022\t\n\001y\030\035 \001(\002\022\013\n\003yaw\030\036 \001(\002\022\022\n\nn"
  "BonnetSts\030\037 \001(\r\022\021\n\tnTrunkSts\030  \001(\r\022\017\n\007nS"
  "RFSts\030! \001(\r\022\021\n\tBCM_KeySt\030# \001(\r\022\026\n\016ACU_SV"
  "M_Button\030$ \001(\r\022\031\n\021ACU_VR_SVM_Switch\030% \001("
  "\r\022\024\n\014hazardLampSt\030& \001(\r\022\033\n\023ExternalTempe"
  "rature\030\' \001(\r\022#\n\033ExternalTemperatureValid"
  "ity\030( \001(\r\022\033\n\023lTimeMsecWheelPulse\030) \001(\004\022\033"
  "\n\023lTimeMsecWheelSpeed\030* \001(\004\022\033\n\023lTimeMsec"
  "SteerAngle\030+ \001(\004\022\033\n\023nFLWheelSpeedRC_Vld\030"
  ", \001(\r\022\033\n\023nFRWheelSpeedRC_Vld\030- \001(\r\022\033\n\023nR"
  "LWheelSpeedRC_Vld\030. \001(\r\022\033\n\023nRRWheelSpeed"
  "RC_Vld\030/ \001(\r\022\034\n\024nSteeingWheelRateVld\0300 \001"
  "(\r\022\021\n\tnBrakeVld\0301 \001(\r\022\025\n\rnWhlSpdVld_LF\0302"
  " \001(\r\022\036\n\026nAccelPedalPositionVld\0303 \001(\r\022\026\n\016"
  "YRS_LgtSnsrSts\0304 \001(\r\022\026\n\016YRS_LatSnsrSts\0305"
  " \001(\r\022\032\n\022YRS_YawRateSnsrSts\0306 \001(\r\022\035\n\025nSte"
  "eingWheelAngleVld\0307 \001(\r\022\027\n\017nRvsLampOutpC"
  "md\0308 \001(\r\022\020\n\010lTimeSec\0309 \001(\004\022\021\n\tTrailHook\030"
  ": \001(\r\022\030\n\020ExternalHumidity\030; \001(\r\022 \n\030Exter"
  "nalHumidityValidity\030< \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_hmi_5f3d_2fmv_5fcan_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_hmi_5f3d_2fmv_5fcan_2eproto_sccs[1] = {
  &scc_info_PB_CanData_hmi_5f3d_2fmv_5fcan_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hmi_5f3d_2fmv_5fcan_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hmi_5f3d_2fmv_5fcan_2eproto = {
  false, false, descriptor_table_protodef_hmi_5f3d_2fmv_5fcan_2eproto, "hmi_3d/mv_can.proto", 1433,
  &descriptor_table_hmi_5f3d_2fmv_5fcan_2eproto_once, descriptor_table_hmi_5f3d_2fmv_5fcan_2eproto_sccs, descriptor_table_hmi_5f3d_2fmv_5fcan_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_hmi_5f3d_2fmv_5fcan_2eproto::offsets,
  file_level_metadata_hmi_5f3d_2fmv_5fcan_2eproto, 1, file_level_enum_descriptors_hmi_5f3d_2fmv_5fcan_2eproto, file_level_service_descriptors_hmi_5f3d_2fmv_5fcan_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_hmi_5f3d_2fmv_5fcan_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_hmi_5f3d_2fmv_5fcan_2eproto)), true);

// ===================================================================

void PB_CanData::InitAsDefaultInstance() {
}
class PB_CanData::_Internal {
 public:
};

PB_CanData::PB_CanData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ndoorstat_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PB_CanData)
}
PB_CanData::PB_CanData(const PB_CanData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ndoorstat_(from.ndoorstat_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nstructlen_, &from.nstructlen_,
    static_cast<size_t>(reinterpret_cast<char*>(&externalhumidityvalidity_) -
    reinterpret_cast<char*>(&nstructlen_)) + sizeof(externalhumidityvalidity_));
  // @@protoc_insertion_point(copy_constructor:PB_CanData)
}

void PB_CanData::SharedCtor() {
  ::memset(&nstructlen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&externalhumidityvalidity_) -
      reinterpret_cast<char*>(&nstructlen_)) + sizeof(externalhumidityvalidity_));
}

PB_CanData::~PB_CanData() {
  // @@protoc_insertion_point(destructor:PB_CanData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PB_CanData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PB_CanData::ArenaDtor(void* object) {
  PB_CanData* _this = reinterpret_cast< PB_CanData* >(object);
  (void)_this;
}
void PB_CanData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_CanData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PB_CanData& PB_CanData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PB_CanData_hmi_5f3d_2fmv_5fcan_2eproto.base);
  return *internal_default_instance();
}


void PB_CanData::Clear() {
// @@protoc_insertion_point(message_clear_start:PB_CanData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ndoorstat_.Clear();
  ::memset(&nstructlen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&externalhumidityvalidity_) -
      reinterpret_cast<char*>(&nstructlen_)) + sizeof(externalhumidityvalidity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_CanData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 nStructLen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nstructlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nFrameId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nframeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lTimeMsec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ltimemsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nBrake = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          nbrake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nLLight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          nllight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nRLight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          nrlight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fVelocity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          fvelocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 nBrakeValue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          nbrakevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fAccelPedalPosition = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          faccelpedalposition_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fLongiAccel = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          flongiaccel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fLateralAccel = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          flateralaccel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fYawRate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          fyawrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 nTransmissionStatus = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ntransmissionstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fAlpha = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          falpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fSteeingWheelAngle = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          fsteeingwheelangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fSteeingWheelRate = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          fsteeingwheelrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 nParkBrake = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          nparkbrake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nWipeWasherSwitch = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          nwipewasherswitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nHazardLightSwitch = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          nhazardlightswitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nHighLowBeamSwitch = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          nhighlowbeamswitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nFLWheelSpeedRC = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          nflwheelspeedrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nFRWheelSpeedRC = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          nfrwheelspeedrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nRLWheelSpeedRC = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          nrlwheelspeedrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nRRWheelSpeedRC = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          nrrwheelspeedrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 nDoorStat = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ndoorstat(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200) {
          _internal_add_ndoorstat(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nPulseDirection = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          npulsedirection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fWheelSpd = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          fwheelspd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float x = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 nBonnetSts = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          nbonnetsts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nTrunkSts = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ntrunksts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nSRFSts = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nsrfsts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 BCM_KeySt = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bcm_keyst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ACU_SVM_Button = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          acu_svm_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ACU_VR_SVM_Switch = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          acu_vr_svm_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hazardLampSt = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          hazardlampst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ExternalTemperature = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          externaltemperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ExternalTemperatureValidity = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          externaltemperaturevalidity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lTimeMsecWheelPulse = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ltimemsecwheelpulse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lTimeMsecWheelSpeed = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ltimemsecwheelspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lTimeMsecSteerAngle = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ltimemsecsteerangle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nFLWheelSpeedRC_Vld = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          nflwheelspeedrc_vld_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nFRWheelSpeedRC_Vld = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          nfrwheelspeedrc_vld_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nRLWheelSpeedRC_Vld = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          nrlwheelspeedrc_vld_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nRRWheelSpeedRC_Vld = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          nrrwheelspeedrc_vld_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nSteeingWheelRateVld = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          nsteeingwheelratevld_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nBrakeVld = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          nbrakevld_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nWhlSpdVld_LF = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          nwhlspdvld_lf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nAccelPedalPositionVld = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          naccelpedalpositionvld_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 YRS_LgtSnsrSts = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          yrs_lgtsnsrsts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 YRS_LatSnsrSts = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          yrs_latsnsrsts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 YRS_YawRateSnsrSts = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          yrs_yawratesnsrsts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nSteeingWheelAngleVld = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          nsteeingwheelanglevld_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nRvsLampOutpCmd = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          nrvslampoutpcmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lTimeSec = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ltimesec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 TrailHook = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          trailhook_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ExternalHumidity = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          externalhumidity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ExternalHumidityValidity = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          externalhumidityvalidity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PB_CanData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_CanData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 nStructLen = 1;
  if (this->nstructlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_nstructlen(), target);
  }

  // uint32 nFrameId = 2;
  if (this->nframeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nframeid(), target);
  }

  // uint64 lTimeMsec = 3;
  if (this->ltimemsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_ltimemsec(), target);
  }

  // int32 nBrake = 4;
  if (this->nbrake() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_nbrake(), target);
  }

  // int32 nLLight = 5;
  if (this->nllight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_nllight(), target);
  }

  // int32 nRLight = 6;
  if (this->nrlight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_nrlight(), target);
  }

  // float fVelocity = 7;
  if (!(this->fvelocity() <= 0 && this->fvelocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_fvelocity(), target);
  }

  // int32 nBrakeValue = 8;
  if (this->nbrakevalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_nbrakevalue(), target);
  }

  // float fAccelPedalPosition = 9;
  if (!(this->faccelpedalposition() <= 0 && this->faccelpedalposition() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_faccelpedalposition(), target);
  }

  // float fLongiAccel = 10;
  if (!(this->flongiaccel() <= 0 && this->flongiaccel() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_flongiaccel(), target);
  }

  // float fLateralAccel = 11;
  if (!(this->flateralaccel() <= 0 && this->flateralaccel() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_flateralaccel(), target);
  }

  // float fYawRate = 12;
  if (!(this->fyawrate() <= 0 && this->fyawrate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_fyawrate(), target);
  }

  // int32 nTransmissionStatus = 13;
  if (this->ntransmissionstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_ntransmissionstatus(), target);
  }

  // float fAlpha = 14;
  if (!(this->falpha() <= 0 && this->falpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_falpha(), target);
  }

  // float fSteeingWheelAngle = 15;
  if (!(this->fsteeingwheelangle() <= 0 && this->fsteeingwheelangle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_fsteeingwheelangle(), target);
  }

  // float fSteeingWheelRate = 16;
  if (!(this->fsteeingwheelrate() <= 0 && this->fsteeingwheelrate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_fsteeingwheelrate(), target);
  }

  // int32 nParkBrake = 17;
  if (this->nparkbrake() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_nparkbrake(), target);
  }

  // int32 nWipeWasherSwitch = 18;
  if (this->nwipewasherswitch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_nwipewasherswitch(), target);
  }

  // int32 nHazardLightSwitch = 19;
  if (this->nhazardlightswitch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_nhazardlightswitch(), target);
  }

  // int32 nHighLowBeamSwitch = 20;
  if (this->nhighlowbeamswitch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_nhighlowbeamswitch(), target);
  }

  // uint32 nFLWheelSpeedRC = 21;
  if (this->nflwheelspeedrc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_nflwheelspeedrc(), target);
  }

  // uint32 nFRWheelSpeedRC = 22;
  if (this->nfrwheelspeedrc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_nfrwheelspeedrc(), target);
  }

  // uint32 nRLWheelSpeedRC = 23;
  if (this->nrlwheelspeedrc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_nrlwheelspeedrc(), target);
  }

  // uint32 nRRWheelSpeedRC = 24;
  if (this->nrrwheelspeedrc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_nrrwheelspeedrc(), target);
  }

  // repeated uint32 nDoorStat = 25;
  {
    int byte_size = _ndoorstat_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          25, _internal_ndoorstat(), byte_size, target);
    }
  }

  // int32 nPulseDirection = 26;
  if (this->npulsedirection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_npulsedirection(), target);
  }

  // float fWheelSpd = 27;
  if (!(this->fwheelspd() <= 0 && this->fwheelspd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(27, this->_internal_fwheelspd(), target);
  }

  // float x = 28;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(28, this->_internal_x(), target);
  }

  // float y = 29;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(29, this->_internal_y(), target);
  }

  // float yaw = 30;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->_internal_yaw(), target);
  }

  // uint32 nBonnetSts = 31;
  if (this->nbonnetsts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_nbonnetsts(), target);
  }

  // uint32 nTrunkSts = 32;
  if (this->ntrunksts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_ntrunksts(), target);
  }

  // uint32 nSRFSts = 33;
  if (this->nsrfsts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_nsrfsts(), target);
  }

  // uint32 BCM_KeySt = 35;
  if (this->bcm_keyst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_bcm_keyst(), target);
  }

  // uint32 ACU_SVM_Button = 36;
  if (this->acu_svm_button() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_acu_svm_button(), target);
  }

  // uint32 ACU_VR_SVM_Switch = 37;
  if (this->acu_vr_svm_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_acu_vr_svm_switch(), target);
  }

  // uint32 hazardLampSt = 38;
  if (this->hazardlampst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_hazardlampst(), target);
  }

  // uint32 ExternalTemperature = 39;
  if (this->externaltemperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_externaltemperature(), target);
  }

  // uint32 ExternalTemperatureValidity = 40;
  if (this->externaltemperaturevalidity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_externaltemperaturevalidity(), target);
  }

  // uint64 lTimeMsecWheelPulse = 41;
  if (this->ltimemsecwheelpulse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(41, this->_internal_ltimemsecwheelpulse(), target);
  }

  // uint64 lTimeMsecWheelSpeed = 42;
  if (this->ltimemsecwheelspeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(42, this->_internal_ltimemsecwheelspeed(), target);
  }

  // uint64 lTimeMsecSteerAngle = 43;
  if (this->ltimemsecsteerangle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(43, this->_internal_ltimemsecsteerangle(), target);
  }

  // uint32 nFLWheelSpeedRC_Vld = 44;
  if (this->nflwheelspeedrc_vld() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(44, this->_internal_nflwheelspeedrc_vld(), target);
  }

  // uint32 nFRWheelSpeedRC_Vld = 45;
  if (this->nfrwheelspeedrc_vld() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(45, this->_internal_nfrwheelspeedrc_vld(), target);
  }

  // uint32 nRLWheelSpeedRC_Vld = 46;
  if (this->nrlwheelspeedrc_vld() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(46, this->_internal_nrlwheelspeedrc_vld(), target);
  }

  // uint32 nRRWheelSpeedRC_Vld = 47;
  if (this->nrrwheelspeedrc_vld() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(47, this->_internal_nrrwheelspeedrc_vld(), target);
  }

  // uint32 nSteeingWheelRateVld = 48;
  if (this->nsteeingwheelratevld() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(48, this->_internal_nsteeingwheelratevld(), target);
  }

  // uint32 nBrakeVld = 49;
  if (this->nbrakevld() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(49, this->_internal_nbrakevld(), target);
  }

  // uint32 nWhlSpdVld_LF = 50;
  if (this->nwhlspdvld_lf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_nwhlspdvld_lf(), target);
  }

  // uint32 nAccelPedalPositionVld = 51;
  if (this->naccelpedalpositionvld() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(51, this->_internal_naccelpedalpositionvld(), target);
  }

  // uint32 YRS_LgtSnsrSts = 52;
  if (this->yrs_lgtsnsrsts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(52, this->_internal_yrs_lgtsnsrsts(), target);
  }

  // uint32 YRS_LatSnsrSts = 53;
  if (this->yrs_latsnsrsts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(53, this->_internal_yrs_latsnsrsts(), target);
  }

  // uint32 YRS_YawRateSnsrSts = 54;
  if (this->yrs_yawratesnsrsts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(54, this->_internal_yrs_yawratesnsrsts(), target);
  }

  // uint32 nSteeingWheelAngleVld = 55;
  if (this->nsteeingwheelanglevld() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(55, this->_internal_nsteeingwheelanglevld(), target);
  }

  // uint32 nRvsLampOutpCmd = 56;
  if (this->nrvslampoutpcmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(56, this->_internal_nrvslampoutpcmd(), target);
  }

  // uint64 lTimeSec = 57;
  if (this->ltimesec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(57, this->_internal_ltimesec(), target);
  }

  // uint32 TrailHook = 58;
  if (this->trailhook() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(58, this->_internal_trailhook(), target);
  }

  // uint32 ExternalHumidity = 59;
  if (this->externalhumidity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(59, this->_internal_externalhumidity(), target);
  }

  // uint32 ExternalHumidityValidity = 60;
  if (this->externalhumidityvalidity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(60, this->_internal_externalhumidityvalidity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_CanData)
  return target;
}

size_t PB_CanData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB_CanData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 nDoorStat = 25;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ndoorstat_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ndoorstat_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 nStructLen = 1;
  if (this->nstructlen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nstructlen());
  }

  // uint32 nFrameId = 2;
  if (this->nframeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nframeid());
  }

  // uint64 lTimeMsec = 3;
  if (this->ltimemsec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ltimemsec());
  }

  // int32 nBrake = 4;
  if (this->nbrake() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nbrake());
  }

  // int32 nLLight = 5;
  if (this->nllight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nllight());
  }

  // int32 nRLight = 6;
  if (this->nrlight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nrlight());
  }

  // float fVelocity = 7;
  if (!(this->fvelocity() <= 0 && this->fvelocity() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 nBrakeValue = 8;
  if (this->nbrakevalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nbrakevalue());
  }

  // float fAccelPedalPosition = 9;
  if (!(this->faccelpedalposition() <= 0 && this->faccelpedalposition() >= 0)) {
    total_size += 1 + 4;
  }

  // float fLongiAccel = 10;
  if (!(this->flongiaccel() <= 0 && this->flongiaccel() >= 0)) {
    total_size += 1 + 4;
  }

  // float fLateralAccel = 11;
  if (!(this->flateralaccel() <= 0 && this->flateralaccel() >= 0)) {
    total_size += 1 + 4;
  }

  // float fYawRate = 12;
  if (!(this->fyawrate() <= 0 && this->fyawrate() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 nTransmissionStatus = 13;
  if (this->ntransmissionstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ntransmissionstatus());
  }

  // float fAlpha = 14;
  if (!(this->falpha() <= 0 && this->falpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float fSteeingWheelAngle = 15;
  if (!(this->fsteeingwheelangle() <= 0 && this->fsteeingwheelangle() >= 0)) {
    total_size += 1 + 4;
  }

  // float fSteeingWheelRate = 16;
  if (!(this->fsteeingwheelrate() <= 0 && this->fsteeingwheelrate() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 nParkBrake = 17;
  if (this->nparkbrake() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nparkbrake());
  }

  // int32 nWipeWasherSwitch = 18;
  if (this->nwipewasherswitch() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nwipewasherswitch());
  }

  // int32 nHazardLightSwitch = 19;
  if (this->nhazardlightswitch() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nhazardlightswitch());
  }

  // int32 nHighLowBeamSwitch = 20;
  if (this->nhighlowbeamswitch() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nhighlowbeamswitch());
  }

  // uint32 nFLWheelSpeedRC = 21;
  if (this->nflwheelspeedrc() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nflwheelspeedrc());
  }

  // uint32 nFRWheelSpeedRC = 22;
  if (this->nfrwheelspeedrc() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nfrwheelspeedrc());
  }

  // uint32 nRLWheelSpeedRC = 23;
  if (this->nrlwheelspeedrc() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nrlwheelspeedrc());
  }

  // uint32 nRRWheelSpeedRC = 24;
  if (this->nrrwheelspeedrc() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nrrwheelspeedrc());
  }

  // int32 nPulseDirection = 26;
  if (this->npulsedirection() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_npulsedirection());
  }

  // float fWheelSpd = 27;
  if (!(this->fwheelspd() <= 0 && this->fwheelspd() >= 0)) {
    total_size += 2 + 4;
  }

  // float x = 28;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 2 + 4;
  }

  // float y = 29;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 2 + 4;
  }

  // float yaw = 30;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 nBonnetSts = 31;
  if (this->nbonnetsts() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nbonnetsts());
  }

  // uint32 nTrunkSts = 32;
  if (this->ntrunksts() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ntrunksts());
  }

  // uint32 nSRFSts = 33;
  if (this->nsrfsts() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nsrfsts());
  }

  // uint32 BCM_KeySt = 35;
  if (this->bcm_keyst() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bcm_keyst());
  }

  // uint32 ACU_SVM_Button = 36;
  if (this->acu_svm_button() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_acu_svm_button());
  }

  // uint32 ACU_VR_SVM_Switch = 37;
  if (this->acu_vr_svm_switch() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_acu_vr_svm_switch());
  }

  // uint32 hazardLampSt = 38;
  if (this->hazardlampst() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hazardlampst());
  }

  // uint32 ExternalTemperature = 39;
  if (this->externaltemperature() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_externaltemperature());
  }

  // uint64 lTimeMsecWheelPulse = 41;
  if (this->ltimemsecwheelpulse() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ltimemsecwheelpulse());
  }

  // uint64 lTimeMsecWheelSpeed = 42;
  if (this->ltimemsecwheelspeed() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ltimemsecwheelspeed());
  }

  // uint32 ExternalTemperatureValidity = 40;
  if (this->externaltemperaturevalidity() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_externaltemperaturevalidity());
  }

  // uint32 nFLWheelSpeedRC_Vld = 44;
  if (this->nflwheelspeedrc_vld() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nflwheelspeedrc_vld());
  }

  // uint64 lTimeMsecSteerAngle = 43;
  if (this->ltimemsecsteerangle() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ltimemsecsteerangle());
  }

  // uint32 nFRWheelSpeedRC_Vld = 45;
  if (this->nfrwheelspeedrc_vld() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nfrwheelspeedrc_vld());
  }

  // uint32 nRLWheelSpeedRC_Vld = 46;
  if (this->nrlwheelspeedrc_vld() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nrlwheelspeedrc_vld());
  }

  // uint32 nRRWheelSpeedRC_Vld = 47;
  if (this->nrrwheelspeedrc_vld() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nrrwheelspeedrc_vld());
  }

  // uint32 nSteeingWheelRateVld = 48;
  if (this->nsteeingwheelratevld() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nsteeingwheelratevld());
  }

  // uint32 nBrakeVld = 49;
  if (this->nbrakevld() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nbrakevld());
  }

  // uint32 nWhlSpdVld_LF = 50;
  if (this->nwhlspdvld_lf() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nwhlspdvld_lf());
  }

  // uint32 nAccelPedalPositionVld = 51;
  if (this->naccelpedalpositionvld() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_naccelpedalpositionvld());
  }

  // uint32 YRS_LgtSnsrSts = 52;
  if (this->yrs_lgtsnsrsts() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_yrs_lgtsnsrsts());
  }

  // uint32 YRS_LatSnsrSts = 53;
  if (this->yrs_latsnsrsts() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_yrs_latsnsrsts());
  }

  // uint32 YRS_YawRateSnsrSts = 54;
  if (this->yrs_yawratesnsrsts() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_yrs_yawratesnsrsts());
  }

  // uint32 nSteeingWheelAngleVld = 55;
  if (this->nsteeingwheelanglevld() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nsteeingwheelanglevld());
  }

  // uint32 nRvsLampOutpCmd = 56;
  if (this->nrvslampoutpcmd() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nrvslampoutpcmd());
  }

  // uint64 lTimeSec = 57;
  if (this->ltimesec() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ltimesec());
  }

  // uint32 TrailHook = 58;
  if (this->trailhook() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_trailhook());
  }

  // uint32 ExternalHumidity = 59;
  if (this->externalhumidity() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_externalhumidity());
  }

  // uint32 ExternalHumidityValidity = 60;
  if (this->externalhumidityvalidity() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_externalhumidityvalidity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PB_CanData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PB_CanData)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_CanData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PB_CanData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PB_CanData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PB_CanData)
    MergeFrom(*source);
  }
}

void PB_CanData::MergeFrom(const PB_CanData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB_CanData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ndoorstat_.MergeFrom(from.ndoorstat_);
  if (from.nstructlen() != 0) {
    _internal_set_nstructlen(from._internal_nstructlen());
  }
  if (from.nframeid() != 0) {
    _internal_set_nframeid(from._internal_nframeid());
  }
  if (from.ltimemsec() != 0) {
    _internal_set_ltimemsec(from._internal_ltimemsec());
  }
  if (from.nbrake() != 0) {
    _internal_set_nbrake(from._internal_nbrake());
  }
  if (from.nllight() != 0) {
    _internal_set_nllight(from._internal_nllight());
  }
  if (from.nrlight() != 0) {
    _internal_set_nrlight(from._internal_nrlight());
  }
  if (!(from.fvelocity() <= 0 && from.fvelocity() >= 0)) {
    _internal_set_fvelocity(from._internal_fvelocity());
  }
  if (from.nbrakevalue() != 0) {
    _internal_set_nbrakevalue(from._internal_nbrakevalue());
  }
  if (!(from.faccelpedalposition() <= 0 && from.faccelpedalposition() >= 0)) {
    _internal_set_faccelpedalposition(from._internal_faccelpedalposition());
  }
  if (!(from.flongiaccel() <= 0 && from.flongiaccel() >= 0)) {
    _internal_set_flongiaccel(from._internal_flongiaccel());
  }
  if (!(from.flateralaccel() <= 0 && from.flateralaccel() >= 0)) {
    _internal_set_flateralaccel(from._internal_flateralaccel());
  }
  if (!(from.fyawrate() <= 0 && from.fyawrate() >= 0)) {
    _internal_set_fyawrate(from._internal_fyawrate());
  }
  if (from.ntransmissionstatus() != 0) {
    _internal_set_ntransmissionstatus(from._internal_ntransmissionstatus());
  }
  if (!(from.falpha() <= 0 && from.falpha() >= 0)) {
    _internal_set_falpha(from._internal_falpha());
  }
  if (!(from.fsteeingwheelangle() <= 0 && from.fsteeingwheelangle() >= 0)) {
    _internal_set_fsteeingwheelangle(from._internal_fsteeingwheelangle());
  }
  if (!(from.fsteeingwheelrate() <= 0 && from.fsteeingwheelrate() >= 0)) {
    _internal_set_fsteeingwheelrate(from._internal_fsteeingwheelrate());
  }
  if (from.nparkbrake() != 0) {
    _internal_set_nparkbrake(from._internal_nparkbrake());
  }
  if (from.nwipewasherswitch() != 0) {
    _internal_set_nwipewasherswitch(from._internal_nwipewasherswitch());
  }
  if (from.nhazardlightswitch() != 0) {
    _internal_set_nhazardlightswitch(from._internal_nhazardlightswitch());
  }
  if (from.nhighlowbeamswitch() != 0) {
    _internal_set_nhighlowbeamswitch(from._internal_nhighlowbeamswitch());
  }
  if (from.nflwheelspeedrc() != 0) {
    _internal_set_nflwheelspeedrc(from._internal_nflwheelspeedrc());
  }
  if (from.nfrwheelspeedrc() != 0) {
    _internal_set_nfrwheelspeedrc(from._internal_nfrwheelspeedrc());
  }
  if (from.nrlwheelspeedrc() != 0) {
    _internal_set_nrlwheelspeedrc(from._internal_nrlwheelspeedrc());
  }
  if (from.nrrwheelspeedrc() != 0) {
    _internal_set_nrrwheelspeedrc(from._internal_nrrwheelspeedrc());
  }
  if (from.npulsedirection() != 0) {
    _internal_set_npulsedirection(from._internal_npulsedirection());
  }
  if (!(from.fwheelspd() <= 0 && from.fwheelspd() >= 0)) {
    _internal_set_fwheelspd(from._internal_fwheelspd());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
  if (from.nbonnetsts() != 0) {
    _internal_set_nbonnetsts(from._internal_nbonnetsts());
  }
  if (from.ntrunksts() != 0) {
    _internal_set_ntrunksts(from._internal_ntrunksts());
  }
  if (from.nsrfsts() != 0) {
    _internal_set_nsrfsts(from._internal_nsrfsts());
  }
  if (from.bcm_keyst() != 0) {
    _internal_set_bcm_keyst(from._internal_bcm_keyst());
  }
  if (from.acu_svm_button() != 0) {
    _internal_set_acu_svm_button(from._internal_acu_svm_button());
  }
  if (from.acu_vr_svm_switch() != 0) {
    _internal_set_acu_vr_svm_switch(from._internal_acu_vr_svm_switch());
  }
  if (from.hazardlampst() != 0) {
    _internal_set_hazardlampst(from._internal_hazardlampst());
  }
  if (from.externaltemperature() != 0) {
    _internal_set_externaltemperature(from._internal_externaltemperature());
  }
  if (from.ltimemsecwheelpulse() != 0) {
    _internal_set_ltimemsecwheelpulse(from._internal_ltimemsecwheelpulse());
  }
  if (from.ltimemsecwheelspeed() != 0) {
    _internal_set_ltimemsecwheelspeed(from._internal_ltimemsecwheelspeed());
  }
  if (from.externaltemperaturevalidity() != 0) {
    _internal_set_externaltemperaturevalidity(from._internal_externaltemperaturevalidity());
  }
  if (from.nflwheelspeedrc_vld() != 0) {
    _internal_set_nflwheelspeedrc_vld(from._internal_nflwheelspeedrc_vld());
  }
  if (from.ltimemsecsteerangle() != 0) {
    _internal_set_ltimemsecsteerangle(from._internal_ltimemsecsteerangle());
  }
  if (from.nfrwheelspeedrc_vld() != 0) {
    _internal_set_nfrwheelspeedrc_vld(from._internal_nfrwheelspeedrc_vld());
  }
  if (from.nrlwheelspeedrc_vld() != 0) {
    _internal_set_nrlwheelspeedrc_vld(from._internal_nrlwheelspeedrc_vld());
  }
  if (from.nrrwheelspeedrc_vld() != 0) {
    _internal_set_nrrwheelspeedrc_vld(from._internal_nrrwheelspeedrc_vld());
  }
  if (from.nsteeingwheelratevld() != 0) {
    _internal_set_nsteeingwheelratevld(from._internal_nsteeingwheelratevld());
  }
  if (from.nbrakevld() != 0) {
    _internal_set_nbrakevld(from._internal_nbrakevld());
  }
  if (from.nwhlspdvld_lf() != 0) {
    _internal_set_nwhlspdvld_lf(from._internal_nwhlspdvld_lf());
  }
  if (from.naccelpedalpositionvld() != 0) {
    _internal_set_naccelpedalpositionvld(from._internal_naccelpedalpositionvld());
  }
  if (from.yrs_lgtsnsrsts() != 0) {
    _internal_set_yrs_lgtsnsrsts(from._internal_yrs_lgtsnsrsts());
  }
  if (from.yrs_latsnsrsts() != 0) {
    _internal_set_yrs_latsnsrsts(from._internal_yrs_latsnsrsts());
  }
  if (from.yrs_yawratesnsrsts() != 0) {
    _internal_set_yrs_yawratesnsrsts(from._internal_yrs_yawratesnsrsts());
  }
  if (from.nsteeingwheelanglevld() != 0) {
    _internal_set_nsteeingwheelanglevld(from._internal_nsteeingwheelanglevld());
  }
  if (from.nrvslampoutpcmd() != 0) {
    _internal_set_nrvslampoutpcmd(from._internal_nrvslampoutpcmd());
  }
  if (from.ltimesec() != 0) {
    _internal_set_ltimesec(from._internal_ltimesec());
  }
  if (from.trailhook() != 0) {
    _internal_set_trailhook(from._internal_trailhook());
  }
  if (from.externalhumidity() != 0) {
    _internal_set_externalhumidity(from._internal_externalhumidity());
  }
  if (from.externalhumidityvalidity() != 0) {
    _internal_set_externalhumidityvalidity(from._internal_externalhumidityvalidity());
  }
}

void PB_CanData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PB_CanData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_CanData::CopyFrom(const PB_CanData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB_CanData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_CanData::IsInitialized() const {
  return true;
}

void PB_CanData::InternalSwap(PB_CanData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ndoorstat_.InternalSwap(&other->ndoorstat_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_CanData, externalhumidityvalidity_)
      + sizeof(PB_CanData::externalhumidityvalidity_)
      - PROTOBUF_FIELD_OFFSET(PB_CanData, nstructlen_)>(
          reinterpret_cast<char*>(&nstructlen_),
          reinterpret_cast<char*>(&other->nstructlen_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_CanData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PB_CanData* Arena::CreateMaybeMessage< ::PB_CanData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PB_CanData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
