// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_3d/mv_plan_track_info.proto

#include "hmi_3d/mv_plan_track_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PB_Location_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PB_PlanToHdmi_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PB_TargetTrack_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PB_Vector2D_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto;
class PB_Vector2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PB_Vector2D> _instance;
} _PB_Vector2D_default_instance_;
class PB_LocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PB_Location> _instance;
} _PB_Location_default_instance_;
class PB_TargetTrackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PB_TargetTrack> _instance;
} _PB_TargetTrack_default_instance_;
class PB_PlanToHdmiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PB_PlanToHdmi> _instance;
} _PB_PlanToHdmi_default_instance_;
class PB_PlanTrackInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PB_PlanTrackInfo> _instance;
} _PB_PlanTrackInfo_default_instance_;
static void InitDefaultsscc_info_PB_Location_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PB_Location_default_instance_;
    new (ptr) ::PB_Location();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PB_Location::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PB_Location_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PB_Location_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_PB_PlanToHdmi_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PB_PlanToHdmi_default_instance_;
    new (ptr) ::PB_PlanToHdmi();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PB_PlanToHdmi::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PB_PlanToHdmi_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PB_PlanToHdmi_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_PB_PlanTrackInfo_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PB_PlanTrackInfo_default_instance_;
    new (ptr) ::PB_PlanTrackInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PB_PlanTrackInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PB_PlanTrackInfo_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PB_PlanTrackInfo_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto}, {
      &scc_info_PB_PlanToHdmi_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto.base,
      &scc_info_PB_TargetTrack_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto.base,
      &scc_info_PB_Location_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_PB_TargetTrack_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PB_TargetTrack_default_instance_;
    new (ptr) ::PB_TargetTrack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PB_TargetTrack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PB_TargetTrack_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PB_TargetTrack_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto}, {
      &scc_info_PB_Vector2D_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_PB_Vector2D_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PB_Vector2D_default_instance_;
    new (ptr) ::PB_Vector2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PB_Vector2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PB_Vector2D_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PB_Vector2D_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PB_Vector2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PB_Vector2D, x_),
  PROTOBUF_FIELD_OFFSET(::PB_Vector2D, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PB_Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PB_Location, x_),
  PROTOBUF_FIELD_OFFSET(::PB_Location, y_),
  PROTOBUF_FIELD_OFFSET(::PB_Location, yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PB_TargetTrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PB_TargetTrack, point_),
  PROTOBUF_FIELD_OFFSET(::PB_TargetTrack, yaw_),
  PROTOBUF_FIELD_OFFSET(::PB_TargetTrack, curvature_),
  PROTOBUF_FIELD_OFFSET(::PB_TargetTrack, speed_),
  PROTOBUF_FIELD_OFFSET(::PB_TargetTrack, ndetectstates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PB_PlanToHdmi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PB_PlanToHdmi, ucmd_),
  PROTOBUF_FIELD_OFFSET(::PB_PlanToHdmi, ustatue_),
  PROTOBUF_FIELD_OFFSET(::PB_PlanToHdmi, utotalstep_),
  PROTOBUF_FIELD_OFFSET(::PB_PlanToHdmi, ucurrentstep_),
  PROTOBUF_FIELD_OFFSET(::PB_PlanToHdmi, udisstep_),
  PROTOBUF_FIELD_OFFSET(::PB_PlanToHdmi, uplanoutdetectsts_),
  PROTOBUF_FIELD_OFFSET(::PB_PlanToHdmi, px_),
  PROTOBUF_FIELD_OFFSET(::PB_PlanToHdmi, py_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PB_PlanTrackInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PB_PlanTrackInfo, ltimemsec_),
  PROTOBUF_FIELD_OFFSET(::PB_PlanTrackInfo, validnum_),
  PROTOBUF_FIELD_OFFSET(::PB_PlanTrackInfo, tplantohdmi_),
  PROTOBUF_FIELD_OFFSET(::PB_PlanTrackInfo, atracksplan_),
  PROTOBUF_FIELD_OFFSET(::PB_PlanTrackInfo, syncdr_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PB_Vector2D)},
  { 7, -1, sizeof(::PB_Location)},
  { 15, -1, sizeof(::PB_TargetTrack)},
  { 25, -1, sizeof(::PB_PlanToHdmi)},
  { 38, -1, sizeof(::PB_PlanTrackInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PB_Vector2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PB_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PB_TargetTrack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PB_PlanToHdmi_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PB_PlanTrackInfo_default_instance_),
};

const char descriptor_table_protodef_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037hmi_3d/mv_plan_track_info.proto\"#\n\013PB_"
  "Vector2D\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"0\n\013PB_Loc"
  "ation\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\013\n\003yaw\030\003 \001(\002"
  "\"s\n\016PB_TargetTrack\022\033\n\005point\030\001 \001(\0132\014.PB_V"
  "ector2D\022\013\n\003yaw\030\002 \001(\002\022\021\n\tcurvature\030\003 \001(\002\022"
  "\r\n\005speed\030\004 \001(\002\022\025\n\rnDetectStates\030\005 \001(\005\"\235\001"
  "\n\rPB_PlanToHdmi\022\014\n\004uCmd\030\001 \001(\r\022\017\n\007uStatue"
  "\030\002 \001(\r\022\022\n\nuTotalStep\030\003 \001(\r\022\024\n\014uCurrentSt"
  "ep\030\004 \001(\r\022\020\n\010uDisStep\030\005 \001(\r\022\031\n\021uPlanOutDe"
  "tectSts\030\006 \001(\r\022\n\n\002px\030\007 \003(\002\022\n\n\002py\030\010 \003(\002\"\240\001"
  "\n\020PB_PlanTrackInfo\022\021\n\tlTimeMsec\030\001 \001(\004\022\020\n"
  "\010validNum\030\002 \001(\r\022#\n\013tPlanToHdmi\030\003 \001(\0132\016.P"
  "B_PlanToHdmi\022$\n\013aTracksPlan\030\004 \003(\0132\017.PB_T"
  "argetTrack\022\034\n\006syncDr\030\005 \001(\0132\014.PB_Location"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto_sccs[5] = {
  &scc_info_PB_Location_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto.base,
  &scc_info_PB_PlanToHdmi_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto.base,
  &scc_info_PB_PlanTrackInfo_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto.base,
  &scc_info_PB_TargetTrack_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto.base,
  &scc_info_PB_Vector2D_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto = {
  false, false, descriptor_table_protodef_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto, "hmi_3d/mv_plan_track_info.proto", 568,
  &descriptor_table_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto_once, descriptor_table_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto_sccs, descriptor_table_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto::offsets,
  file_level_metadata_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto, 5, file_level_enum_descriptors_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto, file_level_service_descriptors_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto)), true);

// ===================================================================

void PB_Vector2D::InitAsDefaultInstance() {
}
class PB_Vector2D::_Internal {
 public:
};

PB_Vector2D::PB_Vector2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PB_Vector2D)
}
PB_Vector2D::PB_Vector2D(const PB_Vector2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:PB_Vector2D)
}

void PB_Vector2D::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

PB_Vector2D::~PB_Vector2D() {
  // @@protoc_insertion_point(destructor:PB_Vector2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PB_Vector2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PB_Vector2D::ArenaDtor(void* object) {
  PB_Vector2D* _this = reinterpret_cast< PB_Vector2D* >(object);
  (void)_this;
}
void PB_Vector2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_Vector2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PB_Vector2D& PB_Vector2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PB_Vector2D_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto.base);
  return *internal_default_instance();
}


void PB_Vector2D::Clear() {
// @@protoc_insertion_point(message_clear_start:PB_Vector2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_Vector2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PB_Vector2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_Vector2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_Vector2D)
  return target;
}

size_t PB_Vector2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB_Vector2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PB_Vector2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PB_Vector2D)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_Vector2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PB_Vector2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PB_Vector2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PB_Vector2D)
    MergeFrom(*source);
  }
}

void PB_Vector2D::MergeFrom(const PB_Vector2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB_Vector2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void PB_Vector2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PB_Vector2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_Vector2D::CopyFrom(const PB_Vector2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB_Vector2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_Vector2D::IsInitialized() const {
  return true;
}

void PB_Vector2D::InternalSwap(PB_Vector2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_Vector2D, y_)
      + sizeof(PB_Vector2D::y_)
      - PROTOBUF_FIELD_OFFSET(PB_Vector2D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_Vector2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PB_Location::InitAsDefaultInstance() {
}
class PB_Location::_Internal {
 public:
};

PB_Location::PB_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PB_Location)
}
PB_Location::PB_Location(const PB_Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:PB_Location)
}

void PB_Location::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
}

PB_Location::~PB_Location() {
  // @@protoc_insertion_point(destructor:PB_Location)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PB_Location::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PB_Location::ArenaDtor(void* object) {
  PB_Location* _this = reinterpret_cast< PB_Location* >(object);
  (void)_this;
}
void PB_Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PB_Location& PB_Location::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PB_Location_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto.base);
  return *internal_default_instance();
}


void PB_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:PB_Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PB_Location::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float yaw = 3;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_Location)
  return target;
}

size_t PB_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB_Location)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw = 3;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PB_Location::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PB_Location)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_Location* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PB_Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PB_Location)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PB_Location)
    MergeFrom(*source);
  }
}

void PB_Location::MergeFrom(const PB_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB_Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
}

void PB_Location::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PB_Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_Location::CopyFrom(const PB_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB_Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_Location::IsInitialized() const {
  return true;
}

void PB_Location::InternalSwap(PB_Location* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_Location, yaw_)
      + sizeof(PB_Location::yaw_)
      - PROTOBUF_FIELD_OFFSET(PB_Location, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_Location::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PB_TargetTrack::InitAsDefaultInstance() {
  ::_PB_TargetTrack_default_instance_._instance.get_mutable()->point_ = const_cast< ::PB_Vector2D*>(
      ::PB_Vector2D::internal_default_instance());
}
class PB_TargetTrack::_Internal {
 public:
  static const ::PB_Vector2D& point(const PB_TargetTrack* msg);
};

const ::PB_Vector2D&
PB_TargetTrack::_Internal::point(const PB_TargetTrack* msg) {
  return *msg->point_;
}
PB_TargetTrack::PB_TargetTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PB_TargetTrack)
}
PB_TargetTrack::PB_TargetTrack(const PB_TargetTrack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_point()) {
    point_ = new ::PB_Vector2D(*from.point_);
  } else {
    point_ = nullptr;
  }
  ::memcpy(&yaw_, &from.yaw_,
    static_cast<size_t>(reinterpret_cast<char*>(&ndetectstates_) -
    reinterpret_cast<char*>(&yaw_)) + sizeof(ndetectstates_));
  // @@protoc_insertion_point(copy_constructor:PB_TargetTrack)
}

void PB_TargetTrack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PB_TargetTrack_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto.base);
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ndetectstates_) -
      reinterpret_cast<char*>(&point_)) + sizeof(ndetectstates_));
}

PB_TargetTrack::~PB_TargetTrack() {
  // @@protoc_insertion_point(destructor:PB_TargetTrack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PB_TargetTrack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete point_;
}

void PB_TargetTrack::ArenaDtor(void* object) {
  PB_TargetTrack* _this = reinterpret_cast< PB_TargetTrack* >(object);
  (void)_this;
}
void PB_TargetTrack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_TargetTrack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PB_TargetTrack& PB_TargetTrack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PB_TargetTrack_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto.base);
  return *internal_default_instance();
}


void PB_TargetTrack::Clear() {
// @@protoc_insertion_point(message_clear_start:PB_TargetTrack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  ::memset(&yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ndetectstates_) -
      reinterpret_cast<char*>(&yaw_)) + sizeof(ndetectstates_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_TargetTrack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PB_Vector2D point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float yaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float curvature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 nDetectStates = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ndetectstates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PB_TargetTrack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_TargetTrack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PB_Vector2D point = 1;
  if (this->has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::point(this), target, stream);
  }

  // float yaw = 2;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_yaw(), target);
  }

  // float curvature = 3;
  if (!(this->curvature() <= 0 && this->curvature() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_curvature(), target);
  }

  // float speed = 4;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_speed(), target);
  }

  // int32 nDetectStates = 5;
  if (this->ndetectstates() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_ndetectstates(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_TargetTrack)
  return target;
}

size_t PB_TargetTrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB_TargetTrack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PB_Vector2D point = 1;
  if (this->has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  // float yaw = 2;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 4;
  }

  // float curvature = 3;
  if (!(this->curvature() <= 0 && this->curvature() >= 0)) {
    total_size += 1 + 4;
  }

  // float speed = 4;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 nDetectStates = 5;
  if (this->ndetectstates() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ndetectstates());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PB_TargetTrack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PB_TargetTrack)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_TargetTrack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PB_TargetTrack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PB_TargetTrack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PB_TargetTrack)
    MergeFrom(*source);
  }
}

void PB_TargetTrack::MergeFrom(const PB_TargetTrack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB_TargetTrack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_point()) {
    _internal_mutable_point()->::PB_Vector2D::MergeFrom(from._internal_point());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
  if (!(from.curvature() <= 0 && from.curvature() >= 0)) {
    _internal_set_curvature(from._internal_curvature());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
  if (from.ndetectstates() != 0) {
    _internal_set_ndetectstates(from._internal_ndetectstates());
  }
}

void PB_TargetTrack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PB_TargetTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_TargetTrack::CopyFrom(const PB_TargetTrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB_TargetTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_TargetTrack::IsInitialized() const {
  return true;
}

void PB_TargetTrack::InternalSwap(PB_TargetTrack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_TargetTrack, ndetectstates_)
      + sizeof(PB_TargetTrack::ndetectstates_)
      - PROTOBUF_FIELD_OFFSET(PB_TargetTrack, point_)>(
          reinterpret_cast<char*>(&point_),
          reinterpret_cast<char*>(&other->point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_TargetTrack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PB_PlanToHdmi::InitAsDefaultInstance() {
}
class PB_PlanToHdmi::_Internal {
 public:
};

PB_PlanToHdmi::PB_PlanToHdmi(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  px_(arena),
  py_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PB_PlanToHdmi)
}
PB_PlanToHdmi::PB_PlanToHdmi(const PB_PlanToHdmi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      px_(from.px_),
      py_(from.py_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ucmd_, &from.ucmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&uplanoutdetectsts_) -
    reinterpret_cast<char*>(&ucmd_)) + sizeof(uplanoutdetectsts_));
  // @@protoc_insertion_point(copy_constructor:PB_PlanToHdmi)
}

void PB_PlanToHdmi::SharedCtor() {
  ::memset(&ucmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uplanoutdetectsts_) -
      reinterpret_cast<char*>(&ucmd_)) + sizeof(uplanoutdetectsts_));
}

PB_PlanToHdmi::~PB_PlanToHdmi() {
  // @@protoc_insertion_point(destructor:PB_PlanToHdmi)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PB_PlanToHdmi::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PB_PlanToHdmi::ArenaDtor(void* object) {
  PB_PlanToHdmi* _this = reinterpret_cast< PB_PlanToHdmi* >(object);
  (void)_this;
}
void PB_PlanToHdmi::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_PlanToHdmi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PB_PlanToHdmi& PB_PlanToHdmi::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PB_PlanToHdmi_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto.base);
  return *internal_default_instance();
}


void PB_PlanToHdmi::Clear() {
// @@protoc_insertion_point(message_clear_start:PB_PlanToHdmi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  px_.Clear();
  py_.Clear();
  ::memset(&ucmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uplanoutdetectsts_) -
      reinterpret_cast<char*>(&ucmd_)) + sizeof(uplanoutdetectsts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_PlanToHdmi::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 uCmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ucmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uStatue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ustatue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uTotalStep = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          utotalstep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uCurrentStep = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ucurrentstep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uDisStep = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          udisstep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uPlanOutDetectSts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          uplanoutdetectsts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float px = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_px(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61) {
          _internal_add_px(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float py = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_py(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69) {
          _internal_add_py(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PB_PlanToHdmi::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_PlanToHdmi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uCmd = 1;
  if (this->ucmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ucmd(), target);
  }

  // uint32 uStatue = 2;
  if (this->ustatue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ustatue(), target);
  }

  // uint32 uTotalStep = 3;
  if (this->utotalstep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_utotalstep(), target);
  }

  // uint32 uCurrentStep = 4;
  if (this->ucurrentstep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ucurrentstep(), target);
  }

  // uint32 uDisStep = 5;
  if (this->udisstep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_udisstep(), target);
  }

  // uint32 uPlanOutDetectSts = 6;
  if (this->uplanoutdetectsts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_uplanoutdetectsts(), target);
  }

  // repeated float px = 7;
  if (this->_internal_px_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_px(), target);
  }

  // repeated float py = 8;
  if (this->_internal_py_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_py(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_PlanToHdmi)
  return target;
}

size_t PB_PlanToHdmi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB_PlanToHdmi)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float px = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_px_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _px_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float py = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_py_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _py_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 uCmd = 1;
  if (this->ucmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ucmd());
  }

  // uint32 uStatue = 2;
  if (this->ustatue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ustatue());
  }

  // uint32 uTotalStep = 3;
  if (this->utotalstep() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_utotalstep());
  }

  // uint32 uCurrentStep = 4;
  if (this->ucurrentstep() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ucurrentstep());
  }

  // uint32 uDisStep = 5;
  if (this->udisstep() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_udisstep());
  }

  // uint32 uPlanOutDetectSts = 6;
  if (this->uplanoutdetectsts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uplanoutdetectsts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PB_PlanToHdmi::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PB_PlanToHdmi)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_PlanToHdmi* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PB_PlanToHdmi>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PB_PlanToHdmi)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PB_PlanToHdmi)
    MergeFrom(*source);
  }
}

void PB_PlanToHdmi::MergeFrom(const PB_PlanToHdmi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB_PlanToHdmi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  px_.MergeFrom(from.px_);
  py_.MergeFrom(from.py_);
  if (from.ucmd() != 0) {
    _internal_set_ucmd(from._internal_ucmd());
  }
  if (from.ustatue() != 0) {
    _internal_set_ustatue(from._internal_ustatue());
  }
  if (from.utotalstep() != 0) {
    _internal_set_utotalstep(from._internal_utotalstep());
  }
  if (from.ucurrentstep() != 0) {
    _internal_set_ucurrentstep(from._internal_ucurrentstep());
  }
  if (from.udisstep() != 0) {
    _internal_set_udisstep(from._internal_udisstep());
  }
  if (from.uplanoutdetectsts() != 0) {
    _internal_set_uplanoutdetectsts(from._internal_uplanoutdetectsts());
  }
}

void PB_PlanToHdmi::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PB_PlanToHdmi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_PlanToHdmi::CopyFrom(const PB_PlanToHdmi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB_PlanToHdmi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_PlanToHdmi::IsInitialized() const {
  return true;
}

void PB_PlanToHdmi::InternalSwap(PB_PlanToHdmi* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  px_.InternalSwap(&other->px_);
  py_.InternalSwap(&other->py_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_PlanToHdmi, uplanoutdetectsts_)
      + sizeof(PB_PlanToHdmi::uplanoutdetectsts_)
      - PROTOBUF_FIELD_OFFSET(PB_PlanToHdmi, ucmd_)>(
          reinterpret_cast<char*>(&ucmd_),
          reinterpret_cast<char*>(&other->ucmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_PlanToHdmi::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PB_PlanTrackInfo::InitAsDefaultInstance() {
  ::_PB_PlanTrackInfo_default_instance_._instance.get_mutable()->tplantohdmi_ = const_cast< ::PB_PlanToHdmi*>(
      ::PB_PlanToHdmi::internal_default_instance());
  ::_PB_PlanTrackInfo_default_instance_._instance.get_mutable()->syncdr_ = const_cast< ::PB_Location*>(
      ::PB_Location::internal_default_instance());
}
class PB_PlanTrackInfo::_Internal {
 public:
  static const ::PB_PlanToHdmi& tplantohdmi(const PB_PlanTrackInfo* msg);
  static const ::PB_Location& syncdr(const PB_PlanTrackInfo* msg);
};

const ::PB_PlanToHdmi&
PB_PlanTrackInfo::_Internal::tplantohdmi(const PB_PlanTrackInfo* msg) {
  return *msg->tplantohdmi_;
}
const ::PB_Location&
PB_PlanTrackInfo::_Internal::syncdr(const PB_PlanTrackInfo* msg) {
  return *msg->syncdr_;
}
PB_PlanTrackInfo::PB_PlanTrackInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  atracksplan_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PB_PlanTrackInfo)
}
PB_PlanTrackInfo::PB_PlanTrackInfo(const PB_PlanTrackInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      atracksplan_(from.atracksplan_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tplantohdmi()) {
    tplantohdmi_ = new ::PB_PlanToHdmi(*from.tplantohdmi_);
  } else {
    tplantohdmi_ = nullptr;
  }
  if (from._internal_has_syncdr()) {
    syncdr_ = new ::PB_Location(*from.syncdr_);
  } else {
    syncdr_ = nullptr;
  }
  ::memcpy(&ltimemsec_, &from.ltimemsec_,
    static_cast<size_t>(reinterpret_cast<char*>(&validnum_) -
    reinterpret_cast<char*>(&ltimemsec_)) + sizeof(validnum_));
  // @@protoc_insertion_point(copy_constructor:PB_PlanTrackInfo)
}

void PB_PlanTrackInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PB_PlanTrackInfo_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto.base);
  ::memset(&tplantohdmi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validnum_) -
      reinterpret_cast<char*>(&tplantohdmi_)) + sizeof(validnum_));
}

PB_PlanTrackInfo::~PB_PlanTrackInfo() {
  // @@protoc_insertion_point(destructor:PB_PlanTrackInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PB_PlanTrackInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tplantohdmi_;
  if (this != internal_default_instance()) delete syncdr_;
}

void PB_PlanTrackInfo::ArenaDtor(void* object) {
  PB_PlanTrackInfo* _this = reinterpret_cast< PB_PlanTrackInfo* >(object);
  (void)_this;
}
void PB_PlanTrackInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_PlanTrackInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PB_PlanTrackInfo& PB_PlanTrackInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PB_PlanTrackInfo_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto.base);
  return *internal_default_instance();
}


void PB_PlanTrackInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PB_PlanTrackInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  atracksplan_.Clear();
  if (GetArena() == nullptr && tplantohdmi_ != nullptr) {
    delete tplantohdmi_;
  }
  tplantohdmi_ = nullptr;
  if (GetArena() == nullptr && syncdr_ != nullptr) {
    delete syncdr_;
  }
  syncdr_ = nullptr;
  ::memset(&ltimemsec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validnum_) -
      reinterpret_cast<char*>(&ltimemsec_)) + sizeof(validnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_PlanTrackInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 lTimeMsec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ltimemsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 validNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          validnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PB_PlanToHdmi tPlanToHdmi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tplantohdmi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PB_TargetTrack aTracksPlan = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_atracksplan(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .PB_Location syncDr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_syncdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PB_PlanTrackInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_PlanTrackInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 lTimeMsec = 1;
  if (this->ltimemsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ltimemsec(), target);
  }

  // uint32 validNum = 2;
  if (this->validnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_validnum(), target);
  }

  // .PB_PlanToHdmi tPlanToHdmi = 3;
  if (this->has_tplantohdmi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tplantohdmi(this), target, stream);
  }

  // repeated .PB_TargetTrack aTracksPlan = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_atracksplan_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_atracksplan(i), target, stream);
  }

  // .PB_Location syncDr = 5;
  if (this->has_syncdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::syncdr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_PlanTrackInfo)
  return target;
}

size_t PB_PlanTrackInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB_PlanTrackInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PB_TargetTrack aTracksPlan = 4;
  total_size += 1UL * this->_internal_atracksplan_size();
  for (const auto& msg : this->atracksplan_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .PB_PlanToHdmi tPlanToHdmi = 3;
  if (this->has_tplantohdmi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tplantohdmi_);
  }

  // .PB_Location syncDr = 5;
  if (this->has_syncdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *syncdr_);
  }

  // uint64 lTimeMsec = 1;
  if (this->ltimemsec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ltimemsec());
  }

  // uint32 validNum = 2;
  if (this->validnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_validnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PB_PlanTrackInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PB_PlanTrackInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_PlanTrackInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PB_PlanTrackInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PB_PlanTrackInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PB_PlanTrackInfo)
    MergeFrom(*source);
  }
}

void PB_PlanTrackInfo::MergeFrom(const PB_PlanTrackInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB_PlanTrackInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  atracksplan_.MergeFrom(from.atracksplan_);
  if (from.has_tplantohdmi()) {
    _internal_mutable_tplantohdmi()->::PB_PlanToHdmi::MergeFrom(from._internal_tplantohdmi());
  }
  if (from.has_syncdr()) {
    _internal_mutable_syncdr()->::PB_Location::MergeFrom(from._internal_syncdr());
  }
  if (from.ltimemsec() != 0) {
    _internal_set_ltimemsec(from._internal_ltimemsec());
  }
  if (from.validnum() != 0) {
    _internal_set_validnum(from._internal_validnum());
  }
}

void PB_PlanTrackInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PB_PlanTrackInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_PlanTrackInfo::CopyFrom(const PB_PlanTrackInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB_PlanTrackInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_PlanTrackInfo::IsInitialized() const {
  return true;
}

void PB_PlanTrackInfo::InternalSwap(PB_PlanTrackInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  atracksplan_.InternalSwap(&other->atracksplan_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_PlanTrackInfo, validnum_)
      + sizeof(PB_PlanTrackInfo::validnum_)
      - PROTOBUF_FIELD_OFFSET(PB_PlanTrackInfo, tplantohdmi_)>(
          reinterpret_cast<char*>(&tplantohdmi_),
          reinterpret_cast<char*>(&other->tplantohdmi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_PlanTrackInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PB_Vector2D* Arena::CreateMaybeMessage< ::PB_Vector2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PB_Vector2D >(arena);
}
template<> PROTOBUF_NOINLINE ::PB_Location* Arena::CreateMaybeMessage< ::PB_Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PB_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::PB_TargetTrack* Arena::CreateMaybeMessage< ::PB_TargetTrack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PB_TargetTrack >(arena);
}
template<> PROTOBUF_NOINLINE ::PB_PlanToHdmi* Arena::CreateMaybeMessage< ::PB_PlanToHdmi >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PB_PlanToHdmi >(arena);
}
template<> PROTOBUF_NOINLINE ::PB_PlanTrackInfo* Arena::CreateMaybeMessage< ::PB_PlanTrackInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PB_PlanTrackInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
