// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_3d_package.proto

#include "hmi_3d_package.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_hmi_5f3d_2fmv_5fapa_5fstate_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PB_ApaStateInfo_hmi_5f3d_2fmv_5fapa_5fstate_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fhead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PB_BaseHead_base_5fhead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hmi_5f3d_2fmv_5fcan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PB_CanData_hmi_5f3d_2fmv_5fcan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hmi_5f3d_2fmv_5fod_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PB_OdInfo_hmi_5f3d_2fmv_5fod_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hmi_5f3d_2fmv_5fplan_5ffull_5fpath_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PB_PlanFullPath_hmi_5f3d_2fmv_5fplan_5ffull_5fpath_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PB_PlanTrackInfo_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hmi_5f3d_2fmv_5fslot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PB_SlotInfo_hmi_5f3d_2fmv_5fslot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hmi_5f3d_2fmv_5fuss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PB_UssSectorOutputData_hmi_5f3d_2fmv_5fuss_2eproto;
class PB_Hmi3dPackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PB_Hmi3dPackage> _instance;
} _PB_Hmi3dPackage_default_instance_;
static void InitDefaultsscc_info_PB_Hmi3dPackage_hmi_5f3d_5fpackage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PB_Hmi3dPackage_default_instance_;
    new (ptr) ::PB_Hmi3dPackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PB_Hmi3dPackage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_PB_Hmi3dPackage_hmi_5f3d_5fpackage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_PB_Hmi3dPackage_hmi_5f3d_5fpackage_2eproto}, {
      &scc_info_PB_BaseHead_base_5fhead_2eproto.base,
      &scc_info_PB_CanData_hmi_5f3d_2fmv_5fcan_2eproto.base,
      &scc_info_PB_UssSectorOutputData_hmi_5f3d_2fmv_5fuss_2eproto.base,
      &scc_info_PB_ApaStateInfo_hmi_5f3d_2fmv_5fapa_5fstate_5finfo_2eproto.base,
      &scc_info_PB_SlotInfo_hmi_5f3d_2fmv_5fslot_2eproto.base,
      &scc_info_PB_OdInfo_hmi_5f3d_2fmv_5fod_2eproto.base,
      &scc_info_PB_PlanTrackInfo_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto.base,
      &scc_info_PB_PlanFullPath_hmi_5f3d_2fmv_5fplan_5ffull_5fpath_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hmi_5f3d_5fpackage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_hmi_5f3d_5fpackage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hmi_5f3d_5fpackage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_hmi_5f3d_5fpackage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dPackage, basehead_),
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dPackage, lsendtimsms_),
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dPackage, usendnum_),
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dPackage, candata_),
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dPackage, usssectordata_),
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dPackage, apastatedata_),
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dPackage, slotdata_),
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dPackage, oddata_),
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dPackage, plantrackdata_),
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dPackage, planfullpathdata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PB_Hmi3dPackage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PB_Hmi3dPackage_default_instance_),
};

const char descriptor_table_protodef_hmi_5f3d_5fpackage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024hmi_3d_package.proto\032\023hmi_3d/mv_can.pr"
  "oto\032\023hmi_3d/mv_uss.proto\032\024hmi_3d/mv_slot"
  ".proto\032\022hmi_3d/mv_od.proto\032\036hmi_3d/mv_ap"
  "a_state_info.proto\032\036hmi_3d/mv_plan_full_"
  "path.proto\032\037hmi_3d/mv_plan_track_info.pr"
  "oto\032\017base_head.proto\"\340\002\n\017PB_Hmi3dPackage"
  "\022\036\n\010BaseHead\030\001 \001(\0132\014.PB_BaseHead\022\023\n\013LSen"
  "dTimsMs\030\002 \001(\004\022\020\n\010uSendNum\030\003 \001(\r\022\034\n\007CanDa"
  "ta\030\004 \001(\0132\013.PB_CanData\022.\n\rUssSectorData\030\005"
  " \001(\0132\027.PB_UssSectorOutputData\022&\n\014ApaStat"
  "eData\030\006 \001(\0132\020.PB_ApaStateInfo\022\036\n\010SlotDat"
  "a\030\007 \001(\0132\014.PB_SlotInfo\022\032\n\006OdData\030\010 \001(\0132\n."
  "PB_OdInfo\022(\n\rPlanTrackData\030\t \001(\0132\021.PB_Pl"
  "anTrackInfo\022*\n\020PlanFullPathData\030\n \001(\0132\020."
  "PB_PlanFullPathb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_hmi_5f3d_5fpackage_2eproto_deps[8] = {
  &::descriptor_table_base_5fhead_2eproto,
  &::descriptor_table_hmi_5f3d_2fmv_5fapa_5fstate_5finfo_2eproto,
  &::descriptor_table_hmi_5f3d_2fmv_5fcan_2eproto,
  &::descriptor_table_hmi_5f3d_2fmv_5fod_2eproto,
  &::descriptor_table_hmi_5f3d_2fmv_5fplan_5ffull_5fpath_2eproto,
  &::descriptor_table_hmi_5f3d_2fmv_5fplan_5ftrack_5finfo_2eproto,
  &::descriptor_table_hmi_5f3d_2fmv_5fslot_2eproto,
  &::descriptor_table_hmi_5f3d_2fmv_5fuss_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_hmi_5f3d_5fpackage_2eproto_sccs[1] = {
  &scc_info_PB_Hmi3dPackage_hmi_5f3d_5fpackage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hmi_5f3d_5fpackage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hmi_5f3d_5fpackage_2eproto = {
  false, false, descriptor_table_protodef_hmi_5f3d_5fpackage_2eproto, "hmi_3d_package.proto", 583,
  &descriptor_table_hmi_5f3d_5fpackage_2eproto_once, descriptor_table_hmi_5f3d_5fpackage_2eproto_sccs, descriptor_table_hmi_5f3d_5fpackage_2eproto_deps, 1, 8,
  schemas, file_default_instances, TableStruct_hmi_5f3d_5fpackage_2eproto::offsets,
  file_level_metadata_hmi_5f3d_5fpackage_2eproto, 1, file_level_enum_descriptors_hmi_5f3d_5fpackage_2eproto, file_level_service_descriptors_hmi_5f3d_5fpackage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_hmi_5f3d_5fpackage_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_hmi_5f3d_5fpackage_2eproto)), true);

// ===================================================================

void PB_Hmi3dPackage::InitAsDefaultInstance() {
  ::_PB_Hmi3dPackage_default_instance_._instance.get_mutable()->basehead_ = const_cast< ::PB_BaseHead*>(
      ::PB_BaseHead::internal_default_instance());
  ::_PB_Hmi3dPackage_default_instance_._instance.get_mutable()->candata_ = const_cast< ::PB_CanData*>(
      ::PB_CanData::internal_default_instance());
  ::_PB_Hmi3dPackage_default_instance_._instance.get_mutable()->usssectordata_ = const_cast< ::PB_UssSectorOutputData*>(
      ::PB_UssSectorOutputData::internal_default_instance());
  ::_PB_Hmi3dPackage_default_instance_._instance.get_mutable()->apastatedata_ = const_cast< ::PB_ApaStateInfo*>(
      ::PB_ApaStateInfo::internal_default_instance());
  ::_PB_Hmi3dPackage_default_instance_._instance.get_mutable()->slotdata_ = const_cast< ::PB_SlotInfo*>(
      ::PB_SlotInfo::internal_default_instance());
  ::_PB_Hmi3dPackage_default_instance_._instance.get_mutable()->oddata_ = const_cast< ::PB_OdInfo*>(
      ::PB_OdInfo::internal_default_instance());
  ::_PB_Hmi3dPackage_default_instance_._instance.get_mutable()->plantrackdata_ = const_cast< ::PB_PlanTrackInfo*>(
      ::PB_PlanTrackInfo::internal_default_instance());
  ::_PB_Hmi3dPackage_default_instance_._instance.get_mutable()->planfullpathdata_ = const_cast< ::PB_PlanFullPath*>(
      ::PB_PlanFullPath::internal_default_instance());
}
class PB_Hmi3dPackage::_Internal {
 public:
  static const ::PB_BaseHead& basehead(const PB_Hmi3dPackage* msg);
  static const ::PB_CanData& candata(const PB_Hmi3dPackage* msg);
  static const ::PB_UssSectorOutputData& usssectordata(const PB_Hmi3dPackage* msg);
  static const ::PB_ApaStateInfo& apastatedata(const PB_Hmi3dPackage* msg);
  static const ::PB_SlotInfo& slotdata(const PB_Hmi3dPackage* msg);
  static const ::PB_OdInfo& oddata(const PB_Hmi3dPackage* msg);
  static const ::PB_PlanTrackInfo& plantrackdata(const PB_Hmi3dPackage* msg);
  static const ::PB_PlanFullPath& planfullpathdata(const PB_Hmi3dPackage* msg);
};

const ::PB_BaseHead&
PB_Hmi3dPackage::_Internal::basehead(const PB_Hmi3dPackage* msg) {
  return *msg->basehead_;
}
const ::PB_CanData&
PB_Hmi3dPackage::_Internal::candata(const PB_Hmi3dPackage* msg) {
  return *msg->candata_;
}
const ::PB_UssSectorOutputData&
PB_Hmi3dPackage::_Internal::usssectordata(const PB_Hmi3dPackage* msg) {
  return *msg->usssectordata_;
}
const ::PB_ApaStateInfo&
PB_Hmi3dPackage::_Internal::apastatedata(const PB_Hmi3dPackage* msg) {
  return *msg->apastatedata_;
}
const ::PB_SlotInfo&
PB_Hmi3dPackage::_Internal::slotdata(const PB_Hmi3dPackage* msg) {
  return *msg->slotdata_;
}
const ::PB_OdInfo&
PB_Hmi3dPackage::_Internal::oddata(const PB_Hmi3dPackage* msg) {
  return *msg->oddata_;
}
const ::PB_PlanTrackInfo&
PB_Hmi3dPackage::_Internal::plantrackdata(const PB_Hmi3dPackage* msg) {
  return *msg->plantrackdata_;
}
const ::PB_PlanFullPath&
PB_Hmi3dPackage::_Internal::planfullpathdata(const PB_Hmi3dPackage* msg) {
  return *msg->planfullpathdata_;
}
void PB_Hmi3dPackage::clear_basehead() {
  if (GetArena() == nullptr && basehead_ != nullptr) {
    delete basehead_;
  }
  basehead_ = nullptr;
}
void PB_Hmi3dPackage::clear_candata() {
  if (GetArena() == nullptr && candata_ != nullptr) {
    delete candata_;
  }
  candata_ = nullptr;
}
void PB_Hmi3dPackage::clear_usssectordata() {
  if (GetArena() == nullptr && usssectordata_ != nullptr) {
    delete usssectordata_;
  }
  usssectordata_ = nullptr;
}
void PB_Hmi3dPackage::clear_apastatedata() {
  if (GetArena() == nullptr && apastatedata_ != nullptr) {
    delete apastatedata_;
  }
  apastatedata_ = nullptr;
}
void PB_Hmi3dPackage::clear_slotdata() {
  if (GetArena() == nullptr && slotdata_ != nullptr) {
    delete slotdata_;
  }
  slotdata_ = nullptr;
}
void PB_Hmi3dPackage::clear_oddata() {
  if (GetArena() == nullptr && oddata_ != nullptr) {
    delete oddata_;
  }
  oddata_ = nullptr;
}
void PB_Hmi3dPackage::clear_plantrackdata() {
  if (GetArena() == nullptr && plantrackdata_ != nullptr) {
    delete plantrackdata_;
  }
  plantrackdata_ = nullptr;
}
void PB_Hmi3dPackage::clear_planfullpathdata() {
  if (GetArena() == nullptr && planfullpathdata_ != nullptr) {
    delete planfullpathdata_;
  }
  planfullpathdata_ = nullptr;
}
PB_Hmi3dPackage::PB_Hmi3dPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PB_Hmi3dPackage)
}
PB_Hmi3dPackage::PB_Hmi3dPackage(const PB_Hmi3dPackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_basehead()) {
    basehead_ = new ::PB_BaseHead(*from.basehead_);
  } else {
    basehead_ = nullptr;
  }
  if (from._internal_has_candata()) {
    candata_ = new ::PB_CanData(*from.candata_);
  } else {
    candata_ = nullptr;
  }
  if (from._internal_has_usssectordata()) {
    usssectordata_ = new ::PB_UssSectorOutputData(*from.usssectordata_);
  } else {
    usssectordata_ = nullptr;
  }
  if (from._internal_has_apastatedata()) {
    apastatedata_ = new ::PB_ApaStateInfo(*from.apastatedata_);
  } else {
    apastatedata_ = nullptr;
  }
  if (from._internal_has_slotdata()) {
    slotdata_ = new ::PB_SlotInfo(*from.slotdata_);
  } else {
    slotdata_ = nullptr;
  }
  if (from._internal_has_oddata()) {
    oddata_ = new ::PB_OdInfo(*from.oddata_);
  } else {
    oddata_ = nullptr;
  }
  if (from._internal_has_plantrackdata()) {
    plantrackdata_ = new ::PB_PlanTrackInfo(*from.plantrackdata_);
  } else {
    plantrackdata_ = nullptr;
  }
  if (from._internal_has_planfullpathdata()) {
    planfullpathdata_ = new ::PB_PlanFullPath(*from.planfullpathdata_);
  } else {
    planfullpathdata_ = nullptr;
  }
  ::memcpy(&lsendtimsms_, &from.lsendtimsms_,
    static_cast<size_t>(reinterpret_cast<char*>(&usendnum_) -
    reinterpret_cast<char*>(&lsendtimsms_)) + sizeof(usendnum_));
  // @@protoc_insertion_point(copy_constructor:PB_Hmi3dPackage)
}

void PB_Hmi3dPackage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PB_Hmi3dPackage_hmi_5f3d_5fpackage_2eproto.base);
  ::memset(&basehead_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usendnum_) -
      reinterpret_cast<char*>(&basehead_)) + sizeof(usendnum_));
}

PB_Hmi3dPackage::~PB_Hmi3dPackage() {
  // @@protoc_insertion_point(destructor:PB_Hmi3dPackage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PB_Hmi3dPackage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete basehead_;
  if (this != internal_default_instance()) delete candata_;
  if (this != internal_default_instance()) delete usssectordata_;
  if (this != internal_default_instance()) delete apastatedata_;
  if (this != internal_default_instance()) delete slotdata_;
  if (this != internal_default_instance()) delete oddata_;
  if (this != internal_default_instance()) delete plantrackdata_;
  if (this != internal_default_instance()) delete planfullpathdata_;
}

void PB_Hmi3dPackage::ArenaDtor(void* object) {
  PB_Hmi3dPackage* _this = reinterpret_cast< PB_Hmi3dPackage* >(object);
  (void)_this;
}
void PB_Hmi3dPackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_Hmi3dPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PB_Hmi3dPackage& PB_Hmi3dPackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PB_Hmi3dPackage_hmi_5f3d_5fpackage_2eproto.base);
  return *internal_default_instance();
}


void PB_Hmi3dPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:PB_Hmi3dPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && basehead_ != nullptr) {
    delete basehead_;
  }
  basehead_ = nullptr;
  if (GetArena() == nullptr && candata_ != nullptr) {
    delete candata_;
  }
  candata_ = nullptr;
  if (GetArena() == nullptr && usssectordata_ != nullptr) {
    delete usssectordata_;
  }
  usssectordata_ = nullptr;
  if (GetArena() == nullptr && apastatedata_ != nullptr) {
    delete apastatedata_;
  }
  apastatedata_ = nullptr;
  if (GetArena() == nullptr && slotdata_ != nullptr) {
    delete slotdata_;
  }
  slotdata_ = nullptr;
  if (GetArena() == nullptr && oddata_ != nullptr) {
    delete oddata_;
  }
  oddata_ = nullptr;
  if (GetArena() == nullptr && plantrackdata_ != nullptr) {
    delete plantrackdata_;
  }
  plantrackdata_ = nullptr;
  if (GetArena() == nullptr && planfullpathdata_ != nullptr) {
    delete planfullpathdata_;
  }
  planfullpathdata_ = nullptr;
  ::memset(&lsendtimsms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usendnum_) -
      reinterpret_cast<char*>(&lsendtimsms_)) + sizeof(usendnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_Hmi3dPackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PB_BaseHead BaseHead = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basehead(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 LSendTimsMs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lsendtimsms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uSendNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          usendnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PB_CanData CanData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_candata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PB_UssSectorOutputData UssSectorData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_usssectordata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PB_ApaStateInfo ApaStateData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_apastatedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PB_SlotInfo SlotData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_slotdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PB_OdInfo OdData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_oddata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PB_PlanTrackInfo PlanTrackData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_plantrackdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PB_PlanFullPath PlanFullPathData = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_planfullpathdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PB_Hmi3dPackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_Hmi3dPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PB_BaseHead BaseHead = 1;
  if (this->has_basehead()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basehead(this), target, stream);
  }

  // uint64 LSendTimsMs = 2;
  if (this->lsendtimsms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_lsendtimsms(), target);
  }

  // uint32 uSendNum = 3;
  if (this->usendnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_usendnum(), target);
  }

  // .PB_CanData CanData = 4;
  if (this->has_candata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::candata(this), target, stream);
  }

  // .PB_UssSectorOutputData UssSectorData = 5;
  if (this->has_usssectordata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::usssectordata(this), target, stream);
  }

  // .PB_ApaStateInfo ApaStateData = 6;
  if (this->has_apastatedata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::apastatedata(this), target, stream);
  }

  // .PB_SlotInfo SlotData = 7;
  if (this->has_slotdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::slotdata(this), target, stream);
  }

  // .PB_OdInfo OdData = 8;
  if (this->has_oddata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::oddata(this), target, stream);
  }

  // .PB_PlanTrackInfo PlanTrackData = 9;
  if (this->has_plantrackdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::plantrackdata(this), target, stream);
  }

  // .PB_PlanFullPath PlanFullPathData = 10;
  if (this->has_planfullpathdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::planfullpathdata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_Hmi3dPackage)
  return target;
}

size_t PB_Hmi3dPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB_Hmi3dPackage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PB_BaseHead BaseHead = 1;
  if (this->has_basehead()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basehead_);
  }

  // .PB_CanData CanData = 4;
  if (this->has_candata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *candata_);
  }

  // .PB_UssSectorOutputData UssSectorData = 5;
  if (this->has_usssectordata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *usssectordata_);
  }

  // .PB_ApaStateInfo ApaStateData = 6;
  if (this->has_apastatedata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *apastatedata_);
  }

  // .PB_SlotInfo SlotData = 7;
  if (this->has_slotdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slotdata_);
  }

  // .PB_OdInfo OdData = 8;
  if (this->has_oddata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oddata_);
  }

  // .PB_PlanTrackInfo PlanTrackData = 9;
  if (this->has_plantrackdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plantrackdata_);
  }

  // .PB_PlanFullPath PlanFullPathData = 10;
  if (this->has_planfullpathdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *planfullpathdata_);
  }

  // uint64 LSendTimsMs = 2;
  if (this->lsendtimsms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lsendtimsms());
  }

  // uint32 uSendNum = 3;
  if (this->usendnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_usendnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PB_Hmi3dPackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PB_Hmi3dPackage)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_Hmi3dPackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PB_Hmi3dPackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PB_Hmi3dPackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PB_Hmi3dPackage)
    MergeFrom(*source);
  }
}

void PB_Hmi3dPackage::MergeFrom(const PB_Hmi3dPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB_Hmi3dPackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_basehead()) {
    _internal_mutable_basehead()->::PB_BaseHead::MergeFrom(from._internal_basehead());
  }
  if (from.has_candata()) {
    _internal_mutable_candata()->::PB_CanData::MergeFrom(from._internal_candata());
  }
  if (from.has_usssectordata()) {
    _internal_mutable_usssectordata()->::PB_UssSectorOutputData::MergeFrom(from._internal_usssectordata());
  }
  if (from.has_apastatedata()) {
    _internal_mutable_apastatedata()->::PB_ApaStateInfo::MergeFrom(from._internal_apastatedata());
  }
  if (from.has_slotdata()) {
    _internal_mutable_slotdata()->::PB_SlotInfo::MergeFrom(from._internal_slotdata());
  }
  if (from.has_oddata()) {
    _internal_mutable_oddata()->::PB_OdInfo::MergeFrom(from._internal_oddata());
  }
  if (from.has_plantrackdata()) {
    _internal_mutable_plantrackdata()->::PB_PlanTrackInfo::MergeFrom(from._internal_plantrackdata());
  }
  if (from.has_planfullpathdata()) {
    _internal_mutable_planfullpathdata()->::PB_PlanFullPath::MergeFrom(from._internal_planfullpathdata());
  }
  if (from.lsendtimsms() != 0) {
    _internal_set_lsendtimsms(from._internal_lsendtimsms());
  }
  if (from.usendnum() != 0) {
    _internal_set_usendnum(from._internal_usendnum());
  }
}

void PB_Hmi3dPackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PB_Hmi3dPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_Hmi3dPackage::CopyFrom(const PB_Hmi3dPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB_Hmi3dPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_Hmi3dPackage::IsInitialized() const {
  return true;
}

void PB_Hmi3dPackage::InternalSwap(PB_Hmi3dPackage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_Hmi3dPackage, usendnum_)
      + sizeof(PB_Hmi3dPackage::usendnum_)
      - PROTOBUF_FIELD_OFFSET(PB_Hmi3dPackage, basehead_)>(
          reinterpret_cast<char*>(&basehead_),
          reinterpret_cast<char*>(&other->basehead_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_Hmi3dPackage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PB_Hmi3dPackage* Arena::CreateMaybeMessage< ::PB_Hmi3dPackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PB_Hmi3dPackage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
