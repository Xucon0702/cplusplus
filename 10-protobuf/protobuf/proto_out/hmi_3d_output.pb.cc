// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_3d_output.proto

#include "hmi_3d_output.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class PB_Hmi3dOutputDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PB_Hmi3dOutputData> _instance;
} _PB_Hmi3dOutputData_default_instance_;
static void InitDefaultsscc_info_PB_Hmi3dOutputData_hmi_5f3d_5foutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PB_Hmi3dOutputData_default_instance_;
    new (ptr) ::PB_Hmi3dOutputData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PB_Hmi3dOutputData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PB_Hmi3dOutputData_hmi_5f3d_5foutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PB_Hmi3dOutputData_hmi_5f3d_5foutput_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hmi_5f3d_5foutput_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_hmi_5f3d_5foutput_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hmi_5f3d_5foutput_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_hmi_5f3d_5foutput_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dOutputData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dOutputData, ltimestamp_ms_),
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dOutputData, hmi_apa_sel_),
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dOutputData, hmi_park_mode_),
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dOutputData, hmi_start_park_),
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dOutputData, hmi_cancel_req_),
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dOutputData, hmi_selected_),
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dOutputData, hmi_pause_req_),
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dOutputData, hmi_resum_req_),
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dOutputData, hmi_tragparkconfswt_),
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dOutputData, hmi_parkslot_id_),
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dOutputData, hmi_parkout_dir_),
  PROTOBUF_FIELD_OFFSET(::PB_Hmi3dOutputData, hmi_slot_points_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PB_Hmi3dOutputData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PB_Hmi3dOutputData_default_instance_),
};

const char descriptor_table_protodef_hmi_5f3d_5foutput_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023hmi_3d_output.proto\"\263\002\n\022PB_Hmi3dOutput"
  "Data\022\025\n\rlTimestamp_ms\030\001 \001(\004\022\023\n\013Hmi_apa_s"
  "el\030\002 \001(\r\022\025\n\rHmi_park_mode\030\003 \001(\r\022\026\n\016Hmi_s"
  "tart_park\030\004 \001(\r\022\026\n\016Hmi_cancel_req\030\005 \001(\r\022"
  "\024\n\014Hmi_Selected\030\006 \001(\r\022\025\n\rHmi_pause_req\030\007"
  " \001(\r\022\025\n\rHmi_resum_req\030\010 \001(\r\022\033\n\023Hmi_tragP"
  "arkConfSwt\030\t \001(\r\022\027\n\017Hmi_parkslot_id\030\n \001("
  "\r\022\027\n\017Hmi_parkout_dir\030\013 \001(\r\022\027\n\017Hmi_slot_p"
  "oints\030\014 \003(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_hmi_5f3d_5foutput_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_hmi_5f3d_5foutput_2eproto_sccs[1] = {
  &scc_info_PB_Hmi3dOutputData_hmi_5f3d_5foutput_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hmi_5f3d_5foutput_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hmi_5f3d_5foutput_2eproto = {
  false, false, descriptor_table_protodef_hmi_5f3d_5foutput_2eproto, "hmi_3d_output.proto", 339,
  &descriptor_table_hmi_5f3d_5foutput_2eproto_once, descriptor_table_hmi_5f3d_5foutput_2eproto_sccs, descriptor_table_hmi_5f3d_5foutput_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_hmi_5f3d_5foutput_2eproto::offsets,
  file_level_metadata_hmi_5f3d_5foutput_2eproto, 1, file_level_enum_descriptors_hmi_5f3d_5foutput_2eproto, file_level_service_descriptors_hmi_5f3d_5foutput_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_hmi_5f3d_5foutput_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_hmi_5f3d_5foutput_2eproto)), true);

// ===================================================================

void PB_Hmi3dOutputData::InitAsDefaultInstance() {
}
class PB_Hmi3dOutputData::_Internal {
 public:
};

PB_Hmi3dOutputData::PB_Hmi3dOutputData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hmi_slot_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PB_Hmi3dOutputData)
}
PB_Hmi3dOutputData::PB_Hmi3dOutputData(const PB_Hmi3dOutputData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hmi_slot_points_(from.hmi_slot_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ltimestamp_ms_, &from.ltimestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&hmi_parkout_dir_) -
    reinterpret_cast<char*>(&ltimestamp_ms_)) + sizeof(hmi_parkout_dir_));
  // @@protoc_insertion_point(copy_constructor:PB_Hmi3dOutputData)
}

void PB_Hmi3dOutputData::SharedCtor() {
  ::memset(&ltimestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hmi_parkout_dir_) -
      reinterpret_cast<char*>(&ltimestamp_ms_)) + sizeof(hmi_parkout_dir_));
}

PB_Hmi3dOutputData::~PB_Hmi3dOutputData() {
  // @@protoc_insertion_point(destructor:PB_Hmi3dOutputData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PB_Hmi3dOutputData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PB_Hmi3dOutputData::ArenaDtor(void* object) {
  PB_Hmi3dOutputData* _this = reinterpret_cast< PB_Hmi3dOutputData* >(object);
  (void)_this;
}
void PB_Hmi3dOutputData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_Hmi3dOutputData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PB_Hmi3dOutputData& PB_Hmi3dOutputData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PB_Hmi3dOutputData_hmi_5f3d_5foutput_2eproto.base);
  return *internal_default_instance();
}


void PB_Hmi3dOutputData::Clear() {
// @@protoc_insertion_point(message_clear_start:PB_Hmi3dOutputData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hmi_slot_points_.Clear();
  ::memset(&ltimestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hmi_parkout_dir_) -
      reinterpret_cast<char*>(&ltimestamp_ms_)) + sizeof(hmi_parkout_dir_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_Hmi3dOutputData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 lTimestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ltimestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Hmi_apa_sel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hmi_apa_sel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Hmi_park_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          hmi_park_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Hmi_start_park = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hmi_start_park_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Hmi_cancel_req = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          hmi_cancel_req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Hmi_Selected = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          hmi_selected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Hmi_pause_req = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          hmi_pause_req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Hmi_resum_req = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          hmi_resum_req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Hmi_tragParkConfSwt = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          hmi_tragparkconfswt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Hmi_parkslot_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          hmi_parkslot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Hmi_parkout_dir = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          hmi_parkout_dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float Hmi_slot_points = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_hmi_slot_points(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101) {
          _internal_add_hmi_slot_points(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PB_Hmi3dOutputData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB_Hmi3dOutputData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 lTimestamp_ms = 1;
  if (this->ltimestamp_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ltimestamp_ms(), target);
  }

  // uint32 Hmi_apa_sel = 2;
  if (this->hmi_apa_sel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hmi_apa_sel(), target);
  }

  // uint32 Hmi_park_mode = 3;
  if (this->hmi_park_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hmi_park_mode(), target);
  }

  // uint32 Hmi_start_park = 4;
  if (this->hmi_start_park() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hmi_start_park(), target);
  }

  // uint32 Hmi_cancel_req = 5;
  if (this->hmi_cancel_req() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hmi_cancel_req(), target);
  }

  // uint32 Hmi_Selected = 6;
  if (this->hmi_selected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_hmi_selected(), target);
  }

  // uint32 Hmi_pause_req = 7;
  if (this->hmi_pause_req() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_hmi_pause_req(), target);
  }

  // uint32 Hmi_resum_req = 8;
  if (this->hmi_resum_req() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_hmi_resum_req(), target);
  }

  // uint32 Hmi_tragParkConfSwt = 9;
  if (this->hmi_tragparkconfswt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_hmi_tragparkconfswt(), target);
  }

  // uint32 Hmi_parkslot_id = 10;
  if (this->hmi_parkslot_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_hmi_parkslot_id(), target);
  }

  // uint32 Hmi_parkout_dir = 11;
  if (this->hmi_parkout_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_hmi_parkout_dir(), target);
  }

  // repeated float Hmi_slot_points = 12;
  if (this->_internal_hmi_slot_points_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_hmi_slot_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB_Hmi3dOutputData)
  return target;
}

size_t PB_Hmi3dOutputData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB_Hmi3dOutputData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float Hmi_slot_points = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_hmi_slot_points_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hmi_slot_points_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 lTimestamp_ms = 1;
  if (this->ltimestamp_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ltimestamp_ms());
  }

  // uint32 Hmi_apa_sel = 2;
  if (this->hmi_apa_sel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hmi_apa_sel());
  }

  // uint32 Hmi_park_mode = 3;
  if (this->hmi_park_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hmi_park_mode());
  }

  // uint32 Hmi_start_park = 4;
  if (this->hmi_start_park() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hmi_start_park());
  }

  // uint32 Hmi_cancel_req = 5;
  if (this->hmi_cancel_req() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hmi_cancel_req());
  }

  // uint32 Hmi_Selected = 6;
  if (this->hmi_selected() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hmi_selected());
  }

  // uint32 Hmi_pause_req = 7;
  if (this->hmi_pause_req() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hmi_pause_req());
  }

  // uint32 Hmi_resum_req = 8;
  if (this->hmi_resum_req() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hmi_resum_req());
  }

  // uint32 Hmi_tragParkConfSwt = 9;
  if (this->hmi_tragparkconfswt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hmi_tragparkconfswt());
  }

  // uint32 Hmi_parkslot_id = 10;
  if (this->hmi_parkslot_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hmi_parkslot_id());
  }

  // uint32 Hmi_parkout_dir = 11;
  if (this->hmi_parkout_dir() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hmi_parkout_dir());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PB_Hmi3dOutputData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PB_Hmi3dOutputData)
  GOOGLE_DCHECK_NE(&from, this);
  const PB_Hmi3dOutputData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PB_Hmi3dOutputData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PB_Hmi3dOutputData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PB_Hmi3dOutputData)
    MergeFrom(*source);
  }
}

void PB_Hmi3dOutputData::MergeFrom(const PB_Hmi3dOutputData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB_Hmi3dOutputData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hmi_slot_points_.MergeFrom(from.hmi_slot_points_);
  if (from.ltimestamp_ms() != 0) {
    _internal_set_ltimestamp_ms(from._internal_ltimestamp_ms());
  }
  if (from.hmi_apa_sel() != 0) {
    _internal_set_hmi_apa_sel(from._internal_hmi_apa_sel());
  }
  if (from.hmi_park_mode() != 0) {
    _internal_set_hmi_park_mode(from._internal_hmi_park_mode());
  }
  if (from.hmi_start_park() != 0) {
    _internal_set_hmi_start_park(from._internal_hmi_start_park());
  }
  if (from.hmi_cancel_req() != 0) {
    _internal_set_hmi_cancel_req(from._internal_hmi_cancel_req());
  }
  if (from.hmi_selected() != 0) {
    _internal_set_hmi_selected(from._internal_hmi_selected());
  }
  if (from.hmi_pause_req() != 0) {
    _internal_set_hmi_pause_req(from._internal_hmi_pause_req());
  }
  if (from.hmi_resum_req() != 0) {
    _internal_set_hmi_resum_req(from._internal_hmi_resum_req());
  }
  if (from.hmi_tragparkconfswt() != 0) {
    _internal_set_hmi_tragparkconfswt(from._internal_hmi_tragparkconfswt());
  }
  if (from.hmi_parkslot_id() != 0) {
    _internal_set_hmi_parkslot_id(from._internal_hmi_parkslot_id());
  }
  if (from.hmi_parkout_dir() != 0) {
    _internal_set_hmi_parkout_dir(from._internal_hmi_parkout_dir());
  }
}

void PB_Hmi3dOutputData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PB_Hmi3dOutputData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_Hmi3dOutputData::CopyFrom(const PB_Hmi3dOutputData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB_Hmi3dOutputData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_Hmi3dOutputData::IsInitialized() const {
  return true;
}

void PB_Hmi3dOutputData::InternalSwap(PB_Hmi3dOutputData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hmi_slot_points_.InternalSwap(&other->hmi_slot_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_Hmi3dOutputData, hmi_parkout_dir_)
      + sizeof(PB_Hmi3dOutputData::hmi_parkout_dir_)
      - PROTOBUF_FIELD_OFFSET(PB_Hmi3dOutputData, ltimestamp_ms_)>(
          reinterpret_cast<char*>(&ltimestamp_ms_),
          reinterpret_cast<char*>(&other->ltimestamp_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_Hmi3dOutputData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PB_Hmi3dOutputData* Arena::CreateMaybeMessage< ::PB_Hmi3dOutputData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PB_Hmi3dOutputData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
